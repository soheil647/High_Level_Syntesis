// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.41 Production Release
//  HLS Date:       Thu Apr  7 20:28:55 PDT 2011
// 
//  Generated by:   ss@DESKTOP-UB05SU4
//  Generated date: Tue Apr 09 16:47:38 2019
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Adding_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module Adding_core_fsm (
  clk, rst, fsm_output, st_out_1_in_tr0, st_out_2_in_tr0, st_out_3_in_tr0, st_out_4_in_tr0,
      st_out_5_in_tr0, st_out_6_in_tr0, st_out_7_in_tr0, st_out_8_in_tr0, st_out_9_in_tr0,
      st_out_10_in_tr0, st_out_11_in_tr0
);
  input clk;
  input rst;
  output [24:0] fsm_output;
  reg [24:0] fsm_output;
  input st_out_1_in_tr0;
  input st_out_2_in_tr0;
  input st_out_3_in_tr0;
  input st_out_4_in_tr0;
  input st_out_5_in_tr0;
  input st_out_6_in_tr0;
  input st_out_7_in_tr0;
  input st_out_8_in_tr0;
  input st_out_9_in_tr0;
  input st_out_10_in_tr0;
  input st_out_11_in_tr0;


  // FSM State Type Declaration for Adding_core_fsm_1
  parameter
    st_main = 5'd0,
    st_out_1_in = 5'd1,
    st_main_1 = 5'd2,
    st_main_2 = 5'd3,
    st_out_2_in = 5'd4,
    st_main_3 = 5'd5,
    st_out_3_in = 5'd6,
    st_main_4 = 5'd7,
    st_out_4_in = 5'd8,
    st_main_5 = 5'd9,
    st_out_5_in = 5'd10,
    st_main_6 = 5'd11,
    st_out_6_in = 5'd12,
    st_main_7 = 5'd13,
    st_out_7_in = 5'd14,
    st_main_8 = 5'd15,
    st_out_8_in = 5'd16,
    st_main_9 = 5'd17,
    st_out_9_in = 5'd18,
    st_main_10 = 5'd19,
    st_out_10_in = 5'd20,
    st_main_11 = 5'd21,
    st_out_11_in = 5'd22,
    st_main_12 = 5'd23,
    st_main_13 = 5'd24,
    state_x = 5'b00000;

  reg [4:0] state_var;
  reg [4:0] state_var_NS;

  always @(st_out_1_in_tr0 or st_out_2_in_tr0 or st_out_3_in_tr0 or st_out_4_in_tr0
      or st_out_5_in_tr0 or st_out_6_in_tr0 or st_out_7_in_tr0 or st_out_8_in_tr0
      or st_out_9_in_tr0 or st_out_10_in_tr0 or st_out_11_in_tr0 or state_var)
  begin : Adding_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 25'b1;
        state_var_NS = st_out_1_in;
      end
      st_out_1_in : begin
        fsm_output = 25'b10;
        if ( st_out_1_in_tr0 ) begin
          state_var_NS = st_main_1;
        end
        else begin
          state_var_NS = st_out_1_in;
        end
      end
      st_main_1 : begin
        fsm_output = 25'b100;
        state_var_NS = st_main_2;
      end
      st_main_2 : begin
        fsm_output = 25'b1000;
        state_var_NS = st_out_2_in;
      end
      st_out_2_in : begin
        fsm_output = 25'b10000;
        if ( st_out_2_in_tr0 ) begin
          state_var_NS = st_main_3;
        end
        else begin
          state_var_NS = st_out_2_in;
        end
      end
      st_main_3 : begin
        fsm_output = 25'b100000;
        state_var_NS = st_out_3_in;
      end
      st_out_3_in : begin
        fsm_output = 25'b1000000;
        if ( st_out_3_in_tr0 ) begin
          state_var_NS = st_main_4;
        end
        else begin
          state_var_NS = st_out_3_in;
        end
      end
      st_main_4 : begin
        fsm_output = 25'b10000000;
        state_var_NS = st_out_4_in;
      end
      st_out_4_in : begin
        fsm_output = 25'b100000000;
        if ( st_out_4_in_tr0 ) begin
          state_var_NS = st_main_5;
        end
        else begin
          state_var_NS = st_out_4_in;
        end
      end
      st_main_5 : begin
        fsm_output = 25'b1000000000;
        state_var_NS = st_out_5_in;
      end
      st_out_5_in : begin
        fsm_output = 25'b10000000000;
        if ( st_out_5_in_tr0 ) begin
          state_var_NS = st_main_6;
        end
        else begin
          state_var_NS = st_out_5_in;
        end
      end
      st_main_6 : begin
        fsm_output = 25'b100000000000;
        state_var_NS = st_out_6_in;
      end
      st_out_6_in : begin
        fsm_output = 25'b1000000000000;
        if ( st_out_6_in_tr0 ) begin
          state_var_NS = st_main_7;
        end
        else begin
          state_var_NS = st_out_6_in;
        end
      end
      st_main_7 : begin
        fsm_output = 25'b10000000000000;
        state_var_NS = st_out_7_in;
      end
      st_out_7_in : begin
        fsm_output = 25'b100000000000000;
        if ( st_out_7_in_tr0 ) begin
          state_var_NS = st_main_8;
        end
        else begin
          state_var_NS = st_out_7_in;
        end
      end
      st_main_8 : begin
        fsm_output = 25'b1000000000000000;
        state_var_NS = st_out_8_in;
      end
      st_out_8_in : begin
        fsm_output = 25'b10000000000000000;
        if ( st_out_8_in_tr0 ) begin
          state_var_NS = st_main_9;
        end
        else begin
          state_var_NS = st_out_8_in;
        end
      end
      st_main_9 : begin
        fsm_output = 25'b100000000000000000;
        state_var_NS = st_out_9_in;
      end
      st_out_9_in : begin
        fsm_output = 25'b1000000000000000000;
        if ( st_out_9_in_tr0 ) begin
          state_var_NS = st_main_10;
        end
        else begin
          state_var_NS = st_out_9_in;
        end
      end
      st_main_10 : begin
        fsm_output = 25'b10000000000000000000;
        state_var_NS = st_out_10_in;
      end
      st_out_10_in : begin
        fsm_output = 25'b100000000000000000000;
        if ( st_out_10_in_tr0 ) begin
          state_var_NS = st_main_11;
        end
        else begin
          state_var_NS = st_out_10_in;
        end
      end
      st_main_11 : begin
        fsm_output = 25'b1000000000000000000000;
        state_var_NS = st_out_11_in;
      end
      st_out_11_in : begin
        fsm_output = 25'b10000000000000000000000;
        if ( st_out_11_in_tr0 ) begin
          state_var_NS = st_main_12;
        end
        else begin
          state_var_NS = st_out_11_in;
        end
      end
      st_main_12 : begin
        fsm_output = 25'b100000000000000000000000;
        state_var_NS = st_main_13;
      end
      st_main_13 : begin
        fsm_output = 25'b1000000000000000000000000;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 25'b0000000000000000000000000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Adding_core
// ------------------------------------------------------------------


module Adding_core (
  clk, rst, A_rsc_mgc_in_wire_d, B_rsc_mgc_in_wire_d, C_rsc_mgc_in_wire_d, D_rsc_mgc_in_wire_d,
      E_rsc_mgc_in_wire_d, Temp_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  input [7:0] A_rsc_mgc_in_wire_d;
  input [7:0] B_rsc_mgc_in_wire_d;
  input [7:0] C_rsc_mgc_in_wire_d;
  input [7:0] D_rsc_mgc_in_wire_d;
  input [7:0] E_rsc_mgc_in_wire_d;
  output [63:0] Temp_rsc_mgc_out_stdreg_d;
  reg [63:0] Temp_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [24:0] fsm_output;
  wire or_dcpl_172;
  wire or_dcpl_175;
  reg [7:0] A_1_sva;
  reg [7:0] B_1_sva;
  reg [7:0] C_1_sva;
  reg [7:0] D_1_sva;
  reg [7:0] E_1_sva;
  reg [63:0] Temp2_1_sva_1;
  reg [15:0] out_1_mul_1_cse_sva;
  reg [63:0] reg_1;
  reg [2:0] in_reg;
  wire [2:0] out_1_in_acc_12;
  wire [3:0] xout_1_in_acc_12;
  wire or_104_cse;
  wire [63:0] z_out;
  wire [64:0] xz_out;
  wire or_tmp_1;
  wire [63:0] z_out_1;
  wire [79:0] xz_out_1;
  wire [2:0] in_i_2_sva_1;
  wire [3:0] xin_i_2_sva_1;

  wire[63:0] mux_10_nl;
  wire[15:0] mux_9_nl;
  wire[63:0] mux1h_6_nl;
  Adding_core_fsm Adding_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .st_out_1_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_2_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_3_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_4_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_5_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_6_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_7_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_8_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_9_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_10_in_tr0((~ (out_1_in_acc_12[2]))),
      .st_out_11_in_tr0((~ (out_1_in_acc_12[2])))
    );
  assign or_104_cse = (fsm_output[21]) | (fsm_output[19]) | (fsm_output[17]) | (fsm_output[15])
      | (fsm_output[13]) | (fsm_output[11]) | (fsm_output[9]) | (fsm_output[7]) |
      (fsm_output[5]) | (fsm_output[2]) | (fsm_output[20]) | (fsm_output[18]) | (fsm_output[16])
      | (fsm_output[14]) | (fsm_output[12]) | (fsm_output[10]) | (fsm_output[8])
      | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[22]) | (fsm_output[1]) |
      (fsm_output[3]);
  assign xin_i_2_sva_1 = in_reg + 3'b1;
  assign in_i_2_sva_1 = xin_i_2_sva_1[2:0];
  assign xout_1_in_acc_12 = ({1'b1 , (in_i_2_sva_1[2:1])}) + 3'b1;
  assign out_1_in_acc_12 = xout_1_in_acc_12[2:0];
  assign or_dcpl_172 = (fsm_output[14]) | (fsm_output[12]);
  assign or_dcpl_175 = (fsm_output[20]) | (fsm_output[18]) | (fsm_output[16]);
  assign or_tmp_1 = (fsm_output[5]) | (fsm_output[7]) | (fsm_output[9]) | (fsm_output[11])
      | (fsm_output[13]) | (fsm_output[15]) | (fsm_output[17]) | (fsm_output[19])
      | (fsm_output[21]) | (fsm_output[23]);
  always @(posedge clk) begin
    if ( rst ) begin
      Temp_rsc_mgc_out_stdreg_d <= 64'b0;
      A_1_sva <= 8'b0;
      B_1_sva <= 8'b0;
      C_1_sva <= 8'b0;
      D_1_sva <= 8'b0;
      Temp2_1_sva_1 <= 64'b0;
      E_1_sva <= 8'b0;
      in_reg <= 3'b0;
      out_1_mul_1_cse_sva <= 16'b0;
      reg_1 <= 64'b0;
    end
    else begin
      Temp_rsc_mgc_out_stdreg_d <= MUX_v_64_2_2({Temp_rsc_mgc_out_stdreg_d , z_out_1},
          fsm_output[23]);
      A_1_sva <= MUX_v_8_2_2({A_rsc_mgc_in_wire_d , A_1_sva}, or_104_cse);
      B_1_sva <= MUX_v_8_2_2({B_rsc_mgc_in_wire_d , B_1_sva}, or_104_cse);
      C_1_sva <= MUX_v_8_2_2({C_rsc_mgc_in_wire_d , C_1_sva}, or_104_cse);
      D_1_sva <= MUX_v_8_2_2({D_rsc_mgc_in_wire_d , D_1_sva}, or_104_cse);
      Temp2_1_sva_1 <= MUX_v_64_2_2({Temp2_1_sva_1 , z_out}, fsm_output[1]);
      E_1_sva <= MUX_v_8_2_2({E_1_sva , E_rsc_mgc_in_wire_d}, fsm_output[0]);
      in_reg <= in_i_2_sva_1 & (signext_3_1(or_dcpl_175 | or_dcpl_172 | (fsm_output[10])
          | (fsm_output[8]) | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[22])
          | (fsm_output[1])));
      out_1_mul_1_cse_sva <= MUX_v_16_2_2({out_1_mul_1_cse_sva , (z_out_1[15:0])},
          fsm_output[2]);
      reg_1 <= MUX_v_64_2_2({z_out_1 , z_out}, or_dcpl_175 | or_dcpl_172 | (fsm_output[10])
          | (fsm_output[8]) | (fsm_output[6]) | (fsm_output[4]) | (fsm_output[22]));
    end
  end
  assign mux_10_nl = MUX_v_64_2_2({Temp2_1_sva_1 , reg_1}, (fsm_output[4]) | (fsm_output[6])
      | (fsm_output[8]) | (fsm_output[10]) | (fsm_output[12]) | (fsm_output[14])
      | (fsm_output[16]) | (fsm_output[18]) | (fsm_output[20]) | (fsm_output[22]));
  assign xz_out = (mux_10_nl) + conv_u2u_9_64(readslicef_11_9_2((conv_u2u_10_11({(conv_u2u_8_9(A_1_sva)
      + conv_u2u_7_9(B_1_sva[7:1])) , (B_1_sva[0])}) + conv_u2u_9_11(conv_u2u_8_9(C_1_sva)
      + conv_u2u_8_9(D_1_sva)))));
  assign z_out = xz_out[63:0];
  assign mux_9_nl = MUX_v_16_2_2({({8'b0 , E_1_sva}) , out_1_mul_1_cse_sva}, (fsm_output[3])
      | or_tmp_1);
  assign mux1h_6_nl = MUX1HOT_v_64_3_2({({56'b0 , E_1_sva}) , Temp2_1_sva_1 , reg_1},
      {(fsm_output[2]) , (fsm_output[3]) , or_tmp_1});
  assign xz_out_1 = conv_u2u_16_64(mux_9_nl) * (mux1h_6_nl);
  assign z_out_1 = xz_out_1[63:0];

  function [63:0] MUX_v_64_2_2;
    input [127:0] inputs;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[127:64];
      end
      1'b1 : begin
        result = inputs[63:0];
      end
      default : begin
        result = inputs[127:64];
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function [15:0] MUX_v_16_2_2;
    input [31:0] inputs;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[31:16];
      end
      1'b1 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[31:16];
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function [8:0] readslicef_11_9_2;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_11_9_2 = tmp[8:0];
  end
  endfunction


  function [63:0] MUX1HOT_v_64_3_2;
    input [191:0] inputs;
    input [2:0] sel;
    reg [63:0] result;
    integer i;
  begin
    result = inputs[0+:64] & {64{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*64+:64] & {64{sel[i]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function  [63:0] conv_u2u_9_64 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_64 = {{55{1'b0}}, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_9 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [10:0] conv_u2u_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [63:0] conv_u2u_16_64 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_64 = {{48{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Adding
//  Generated from file(s):
//    2) $PROJECT_HOME/ESL.c
// ------------------------------------------------------------------


module Adding (
  A_rsc_z, B_rsc_z, C_rsc_z, D_rsc_z, E_rsc_z, Temp_rsc_z, clk, rst
);
  input [7:0] A_rsc_z;
  input [7:0] B_rsc_z;
  input [7:0] C_rsc_z;
  input [7:0] D_rsc_z;
  input [7:0] E_rsc_z;
  output [63:0] Temp_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [7:0] A_rsc_mgc_in_wire_d;
  wire [7:0] B_rsc_mgc_in_wire_d;
  wire [7:0] C_rsc_mgc_in_wire_d;
  wire [7:0] D_rsc_mgc_in_wire_d;
  wire [7:0] E_rsc_mgc_in_wire_d;
  wire [63:0] Temp_rsc_mgc_out_stdreg_d;

  mgc_in_wire #(.rscid(1),
  .width(8)) A_rsc_mgc_in_wire (
      .d(A_rsc_mgc_in_wire_d),
      .z(A_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(8)) B_rsc_mgc_in_wire (
      .d(B_rsc_mgc_in_wire_d),
      .z(B_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(8)) C_rsc_mgc_in_wire (
      .d(C_rsc_mgc_in_wire_d),
      .z(C_rsc_z)
    );
  mgc_in_wire #(.rscid(4),
  .width(8)) D_rsc_mgc_in_wire (
      .d(D_rsc_mgc_in_wire_d),
      .z(D_rsc_z)
    );
  mgc_in_wire #(.rscid(5),
  .width(8)) E_rsc_mgc_in_wire (
      .d(E_rsc_mgc_in_wire_d),
      .z(E_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(64)) Temp_rsc_mgc_out_stdreg (
      .d(Temp_rsc_mgc_out_stdreg_d),
      .z(Temp_rsc_z)
    );
  Adding_core Adding_core_inst (
      .clk(clk),
      .rst(rst),
      .A_rsc_mgc_in_wire_d(A_rsc_mgc_in_wire_d),
      .B_rsc_mgc_in_wire_d(B_rsc_mgc_in_wire_d),
      .C_rsc_mgc_in_wire_d(C_rsc_mgc_in_wire_d),
      .D_rsc_mgc_in_wire_d(D_rsc_mgc_in_wire_d),
      .E_rsc_mgc_in_wire_d(E_rsc_mgc_in_wire_d),
      .Temp_rsc_mgc_out_stdreg_d(Temp_rsc_mgc_out_stdreg_d)
    );
endmodule



