// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.41 Production Release
//  HLS Date:       Thu Apr  7 20:28:55 PDT 2011
// 
//  Generated by:   ss@DESKTOP-UB05SU4
//  Generated date: Sat Apr 20 18:25:18 2019
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module Convolotion_core_fsm (
  clk, rst, fsm_output, st_for_for_1_tr0, st_for_tr0
);
  input clk;
  input rst;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input st_for_for_1_tr0;
  input st_for_tr0;


  // FSM State Type Declaration for Convolotion_core_fsm_1
  parameter
    st_main = 2'd0,
    st_for_for = 2'd1,
    st_for_for_1 = 2'd2,
    st_for = 2'd3,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;

  always @(st_for_for_1_tr0 or st_for_tr0 or state_var)
  begin : Convolotion_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 4'b1;
        state_var_NS = st_for_for;
      end
      st_for_for : begin
        fsm_output = 4'b10;
        state_var_NS = st_for_for_1;
      end
      st_for_for_1 : begin
        fsm_output = 4'b100;
        if ( st_for_for_1_tr0 ) begin
          state_var_NS = st_for;
        end
        else begin
          state_var_NS = st_for_for;
        end
      end
      st_for : begin
        fsm_output = 4'b1000;
        if ( st_for_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_for_for;
        end
      end
      default : begin
        fsm_output = 4'b0000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core
// ------------------------------------------------------------------


module Convolotion_core (
  clk, rst, in_rsc_singleport_addr, in_rsc_singleport_re, in_rsc_singleport_data_out,
      out_rsc_singleport_data_in, out_rsc_singleport_addr, out_rsc_singleport_we
);
  input clk;
  input rst;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_we;


  // Interconnect Declarations
  wire [3:0] fsm_output;
  wire [9:0] for_for_acc_3_tmp;
  wire [10:0] xfor_for_acc_3_tmp;
  wire [10:0] for_for_for_for_acc_3_tmp;
  wire [11:0] xfor_for_for_for_acc_3_tmp;
  wire and_dcpl_25;
  wire or_dcpl_34;
  wire or_dcpl_43;
  reg [5:0] Result_sg1_sva;
  reg Result_1_sva;
  reg Result_sg2_sva;
  reg [1:0] Kcolumn_1_sva;
  reg exit_for_for_for_sva;
  reg [1:0] Krow_1_sva;
  reg for_for_for_for_lor_lpi_2_dfm;
  reg exit_for_for_for_1_sva;
  reg exit_for_for_lpi_2_dfm;
  reg for_for_stage_0;
  reg [1:0] for_for_for_for_else_mux_itm;
  reg for_for_for_for_else_mux_1_itm;
  reg [8:0] Drow_slc_Drow_1_itm;
  reg for_for_stage_0_1;
  reg [8:0] Dcolumn_1_sva_2;
  reg [8:0] Drow_1_sva_2;
  wire Result_sg2_sva_dfm_mx0;
  wire [5:0] Result_sg1_sva_dfm_mx0;
  wire Result_1_sva_dfm_mx0;
  wire and_dcpl_42;
  wire and_dcpl_44;
  wire exit_for_for_for_1_sva_1;
  wire [8:0] slc_sat_sva;
  wire [9:0] xslc_sat_sva;
  wire [1:0] Kcolumn_1_sva_1;
  wire [2:0] xKcolumn_1_sva_1;
  wire [1:0] Krow_1_sva_1;
  wire [2:0] xKrow_1_sva_1;
  wire [1:0] for_for_for_for_oelse_2_acc_itm;
  wire [2:0] xfor_for_for_for_oelse_2_acc_itm;
  wire [1:0] for_for_for_acc_itm;
  wire [2:0] xfor_for_for_acc_itm;
  wire [1:0] for_for_for_for_acc_itm;
  wire [2:0] xfor_for_for_for_acc_itm;
  wire [10:0] z_out;
  wire [11:0] xz_out;
  wire exit_for_for_for_sva_dfm_1_mx0;
  wire [2:0] for_for_for_for_else_acc_6_sdt;
  wire [3:0] xfor_for_for_for_else_acc_6_sdt;
  wire [7:0] for_for_for_for_else_ac_fixed_cctor_sva;
  wire and_63_cse;
  wire slc_exs_3_tmp_tmp;
  wire slc_exs_7_tmp_tmp;
  wire or_dcpl_54;
  wire nor_16_tmp;
  wire and_88_tmp;
  wire [2:0] for_for_for_for_else_acc_7_itm;
  wire [3:0] xfor_for_for_for_else_acc_7_itm;

  wire[2:0] mux_21_nl;
  Convolotion_core_fsm Convolotion_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .st_for_for_1_tr0((~(for_for_stage_0_1 | for_for_stage_0))),
      .st_for_tr0((z_out[9]))
    );
  assign nor_16_tmp = ~((~((~(and_dcpl_44 | and_dcpl_42 | for_for_stage_0_1)) | (fsm_output[2])))
      | or_dcpl_34);
  assign and_88_tmp = and_dcpl_42 & (~ (fsm_output[2]));
  assign and_63_cse = (~ or_dcpl_43) & (fsm_output[2]);
  assign exit_for_for_for_1_sva_1 = (~ (for_for_for_for_acc_itm[1])) & exit_for_for_for_sva_dfm_1_mx0;
  assign xfor_for_for_for_acc_3_tmp = conv_s2s_2_11(Krow_1_sva + 2'b11) + conv_u2s_9_11(Drow_1_sva_2);
  assign for_for_for_for_acc_3_tmp = xfor_for_for_for_acc_3_tmp[10:0];
  assign xfor_for_for_for_oelse_2_acc_itm = (~ (for_for_for_for_acc_3_tmp[10:9]))
      + 2'b1;
  assign for_for_for_for_oelse_2_acc_itm = xfor_for_for_for_oelse_2_acc_itm[1:0];
  assign xfor_for_acc_3_tmp = conv_u2u_9_10(Drow_1_sva_2) + 10'b1;
  assign for_for_acc_3_tmp = xfor_for_acc_3_tmp[9:0];
  assign exit_for_for_for_sva_dfm_1_mx0 = MUX_s_1_2_2({(~ (for_for_for_acc_itm[1]))
      , exit_for_for_for_sva}, for_for_for_for_acc_itm[1]);
  assign xfor_for_for_acc_itm = Kcolumn_1_sva_1 + 2'b1;
  assign for_for_for_acc_itm = xfor_for_for_acc_itm[1:0];
  assign xKcolumn_1_sva_1 = Kcolumn_1_sva + 2'b1;
  assign Kcolumn_1_sva_1 = xKcolumn_1_sva_1[1:0];
  assign xfor_for_for_for_acc_itm = Krow_1_sva_1 + 2'b1;
  assign for_for_for_for_acc_itm = xfor_for_for_for_acc_itm[1:0];
  assign xKrow_1_sva_1 = Krow_1_sva + 2'b1;
  assign Krow_1_sva_1 = xKrow_1_sva_1[1:0];
  assign xfor_for_for_for_else_acc_6_sdt = conv_u2u_2_3(Krow_1_sva) + conv_u2u_2_3(Kcolumn_1_sva);
  assign for_for_for_for_else_acc_6_sdt = xfor_for_for_for_else_acc_6_sdt[2:0];
  assign xfor_for_for_for_else_acc_7_itm = conv_u2u_2_3(for_for_for_for_else_acc_6_sdt[2:1])
      + conv_u2u_2_3(Krow_1_sva);
  assign for_for_for_for_else_acc_7_itm = xfor_for_for_for_else_acc_7_itm[2:0];
  assign Result_1_sva_dfm_mx0 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[0])
      , Result_1_sva}, for_for_for_for_lor_lpi_2_dfm);
  assign Result_sg1_sva_dfm_mx0 = MUX_v_6_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[6:1])
      , Result_sg1_sva}, for_for_for_for_lor_lpi_2_dfm);
  assign Result_sg2_sva_dfm_mx0 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[7])
      , Result_sg2_sva}, for_for_for_for_lor_lpi_2_dfm);
  assign for_for_for_for_else_ac_fixed_cctor_sva = (slc_sat_sva[7:0]) | (signext_8_1(slc_sat_sva[8]));
  assign xslc_sat_sva = conv_u2u_8_9({Result_sg2_sva , Result_sg1_sva , Result_1_sva})
      + conv_u2u_5_9(readslicef_12_5_7(conv_u2u_24_12(conv_u2u_8_12(in_rsc_singleport_data_out)
      * conv_u2u_5_12({for_for_for_for_else_mux_itm , 1'b0 , ({{1{for_for_for_for_else_mux_1_itm}},
      for_for_for_for_else_mux_1_itm})}))));
  assign slc_sat_sva = xslc_sat_sva[8:0];
  assign and_dcpl_25 = ~((fsm_output[3]) | (fsm_output[0]));
  assign or_dcpl_34 = (fsm_output[3]) | (fsm_output[0]);
  assign or_dcpl_43 = (~ for_for_stage_0_1) | exit_for_for_lpi_2_dfm;
  assign in_rsc_singleport_addr = {((for_for_for_for_acc_3_tmp[8:0]) + conv_s2u_2_9(z_out[10:9]))
      , (z_out[8:0])};
  assign in_rsc_singleport_re = ~(for_for_stage_0_1 & (~ (z_out[9])) & (~ (z_out[10]))
      & (~ (for_for_for_for_acc_3_tmp[10])) & (fsm_output[1]) & (~ (for_for_for_for_oelse_2_acc_itm[1])));
  assign out_rsc_singleport_data_in = {Result_sg2_sva_dfm_mx0 , Result_sg1_sva_dfm_mx0
      , Result_1_sva_dfm_mx0};
  assign out_rsc_singleport_addr = {Drow_slc_Drow_1_itm , Dcolumn_1_sva_2};
  assign out_rsc_singleport_we = ~(for_for_stage_0_1 & (fsm_output[2]) & exit_for_for_for_1_sva);
  assign and_dcpl_42 = ((for_for_for_for_acc_itm[1]) | (~ (for_for_for_acc_itm[1])))
      & (~ exit_for_for_for_1_sva_1) & for_for_stage_0_1;
  assign and_dcpl_44 = (((~ (for_for_for_for_acc_itm[1])) & (for_for_for_acc_itm[1]))
      | exit_for_for_for_1_sva_1) & for_for_stage_0_1;
  assign slc_exs_3_tmp_tmp = ~(exit_for_for_for_1_sva_1 & for_for_stage_0_1);
  assign slc_exs_7_tmp_tmp = ~(exit_for_for_for_1_sva & (~ or_dcpl_43));
  assign or_dcpl_54 = or_dcpl_43 | exit_for_for_for_1_sva;
  always @(posedge clk) begin
    if ( rst ) begin
      Dcolumn_1_sva_2 <= 9'b0;
      for_for_stage_0 <= 1'b0;
      Drow_1_sva_2 <= 9'b0;
      Kcolumn_1_sva <= 2'b0;
      exit_for_for_for_sva <= 1'b0;
      Krow_1_sva <= 2'b0;
      for_for_stage_0_1 <= 1'b0;
      Result_1_sva <= 1'b0;
      Result_sg1_sva <= 6'b0;
      Result_sg2_sva <= 1'b0;
      exit_for_for_lpi_2_dfm <= 1'b0;
      exit_for_for_for_1_sva <= 1'b0;
      for_for_for_for_lor_lpi_2_dfm <= 1'b0;
      for_for_for_for_else_mux_1_itm <= 1'b0;
      for_for_for_for_else_mux_itm <= 2'b0;
      Drow_slc_Drow_1_itm <= 9'b0;
    end
    else begin
      Dcolumn_1_sva_2 <= (MUX_v_9_2_2({(z_out[8:0]) , Dcolumn_1_sva_2}, and_dcpl_25))
          & (signext_9_1(~ (fsm_output[0])));
      for_for_stage_0 <= (for_for_stage_0 | or_dcpl_34) & (~(for_for_stage_0_1 &
          (~ (for_for_for_for_acc_itm[1])) & (~ (for_for_for_acc_itm[1])) & (for_for_acc_3_tmp[9])
          & (fsm_output[1])));
      Drow_1_sva_2 <= (MUX_v_9_2_2({(for_for_acc_3_tmp[8:0]) , Drow_1_sva_2}, (((~
          for_for_stage_0_1) | (for_for_for_for_acc_itm[1]) | (for_for_for_acc_itm[1]))
          & (fsm_output[1])) | (fsm_output[2]))) & (signext_9_1(~ or_dcpl_34));
      Kcolumn_1_sva <= (MUX_v_2_2_2({Kcolumn_1_sva_1 , Kcolumn_1_sva}, ~((~(((~((~((~
          exit_for_for_for_1_sva_1) & (for_for_for_for_acc_itm[1]))) & for_for_stage_0_1))
          & slc_exs_3_tmp_tmp) | (fsm_output[2]))) | or_dcpl_34))) & (signext_2_1(~((~((fsm_output[2])
          | slc_exs_3_tmp_tmp)) | or_dcpl_34)));
      exit_for_for_for_sva <= (MUX_s_1_2_2({exit_for_for_for_sva , (exit_for_for_for_sva_dfm_1_mx0
          & (~ exit_for_for_for_1_sva_1))}, for_for_stage_0_1 & (fsm_output[1])))
          & (~ or_dcpl_34);
      Krow_1_sva <= (MUX1HOT_v_2_3_2({(signext_2_1(~ (for_for_for_for_acc_itm[1])))
          , Krow_1_sva_1 , Krow_1_sva}, {(~(and_88_tmp | nor_16_tmp)) , (and_88_tmp
          & (~ nor_16_tmp)) , nor_16_tmp})) & (signext_2_1(~(((~ (fsm_output[2]))
          & and_dcpl_44) | or_dcpl_34)));
      for_for_stage_0_1 <= (MUX_s_1_2_2({for_for_stage_0 , for_for_stage_0_1}, and_dcpl_25
          & (~ (fsm_output[2])))) | or_dcpl_34;
      Result_1_sva <= (MUX_s_1_2_2({Result_1_sva , (Result_1_sva_dfm_mx0 & (~ exit_for_for_for_1_sva))},
          and_63_cse)) & (~ or_dcpl_34);
      Result_sg1_sva <= ((MUX_v_6_2_2({(Result_sg1_sva_dfm_mx0 & (signext_6_1(~(exit_for_for_for_1_sva
          | or_dcpl_43)))) , Result_sg1_sva}, ~(((~(or_dcpl_54 & slc_exs_7_tmp_tmp
          & or_dcpl_43)) & (fsm_output[2])) | or_dcpl_34))) & (signext_6_1(~(((~
          slc_exs_7_tmp_tmp) & (fsm_output[2])) | or_dcpl_34)))) | (signext_6_1(or_dcpl_54
          & (~ or_dcpl_34) & slc_exs_7_tmp_tmp & (~ or_dcpl_43) & (fsm_output[2])));
      Result_sg2_sva <= (MUX_s_1_2_2({Result_sg2_sva , (Result_sg2_sva_dfm_mx0 &
          (~ exit_for_for_for_1_sva))}, and_63_cse)) & (~ or_dcpl_34);
      exit_for_for_lpi_2_dfm <= (for_for_acc_3_tmp[9]) & exit_for_for_for_1_sva_1;
      exit_for_for_for_1_sva <= exit_for_for_for_1_sva_1;
      for_for_for_for_lor_lpi_2_dfm <= (for_for_for_for_oelse_2_acc_itm[1]) | (for_for_for_for_acc_3_tmp[10])
          | (z_out[9]) | (z_out[10]);
      for_for_for_for_else_mux_1_itm <= MUX_s_1_16_2({1'b0 , 1'b0 , 1'b0 , 1'b0 ,
          1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0
          , 1'b0}, {for_for_for_for_else_acc_7_itm , (for_for_for_for_else_acc_6_sdt[0])});
      for_for_for_for_else_mux_itm <= MUX_v_2_16_2({2'b1 , 2'b10 , 2'b1 , 2'b10 ,
          2'b0 , 2'b10 , 2'b1 , 2'b10 , 2'b1 , 2'b0 , 2'b0 , 2'b0 , 2'b0 , 2'b0 ,
          2'b0 , 2'b0}, {for_for_for_for_else_acc_7_itm , (for_for_for_for_else_acc_6_sdt[0])});
      Drow_slc_Drow_1_itm <= Drow_1_sva_2;
    end
  end
  assign mux_21_nl = MUX_v_3_2_2({(conv_u2s_2_3(Kcolumn_1_sva) + 3'b111) , 3'b1},
      fsm_output[3]);
  assign xz_out = conv_u2u_9_11(Dcolumn_1_sva_2) + conv_s2u_3_11(mux_21_nl);
  assign z_out = xz_out[10:0];

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [4:0] readslicef_12_5_7;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_12_5_7 = tmp[4:0];
  end
  endfunction


  function [8:0] MUX_v_9_2_2;
    input [17:0] inputs;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[17:9];
      end
      1'b1 : begin
        result = inputs[8:0];
      end
      default : begin
        result = inputs[17:9];
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function [8:0] signext_9_1;
    input [0:0] vector;
  begin
    signext_9_1= {{8{vector[0]}}, vector};
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [5:0] signext_6_1;
    input [0:0] vector;
  begin
    signext_6_1= {{5{vector[0]}}, vector};
  end
  endfunction


  function [0:0] MUX_s_1_16_2;
    input [15:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[15:15];
      end
      4'b0001 : begin
        result = inputs[14:14];
      end
      4'b0010 : begin
        result = inputs[13:13];
      end
      4'b0011 : begin
        result = inputs[12:12];
      end
      4'b0100 : begin
        result = inputs[11:11];
      end
      4'b0101 : begin
        result = inputs[10:10];
      end
      4'b0110 : begin
        result = inputs[9:9];
      end
      4'b0111 : begin
        result = inputs[8:8];
      end
      4'b1000 : begin
        result = inputs[7:7];
      end
      4'b1001 : begin
        result = inputs[6:6];
      end
      4'b1010 : begin
        result = inputs[5:5];
      end
      4'b1011 : begin
        result = inputs[4:4];
      end
      4'b1100 : begin
        result = inputs[3:3];
      end
      4'b1101 : begin
        result = inputs[2:2];
      end
      4'b1110 : begin
        result = inputs[1:1];
      end
      4'b1111 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[15:15];
      end
    endcase
    MUX_s_1_16_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_16_2;
    input [31:0] inputs;
    input [3:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[31:30];
      end
      4'b0001 : begin
        result = inputs[29:28];
      end
      4'b0010 : begin
        result = inputs[27:26];
      end
      4'b0011 : begin
        result = inputs[25:24];
      end
      4'b0100 : begin
        result = inputs[23:22];
      end
      4'b0101 : begin
        result = inputs[21:20];
      end
      4'b0110 : begin
        result = inputs[19:18];
      end
      4'b0111 : begin
        result = inputs[17:16];
      end
      4'b1000 : begin
        result = inputs[15:14];
      end
      4'b1001 : begin
        result = inputs[13:12];
      end
      4'b1010 : begin
        result = inputs[11:10];
      end
      4'b1011 : begin
        result = inputs[9:8];
      end
      4'b1100 : begin
        result = inputs[7:6];
      end
      4'b1101 : begin
        result = inputs[5:4];
      end
      4'b1110 : begin
        result = inputs[3:2];
      end
      4'b1111 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[31:30];
      end
    endcase
    MUX_v_2_16_2 = result;
  end
  endfunction


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function signed [10:0] conv_s2s_2_11 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_11 = {{9{vector[1]}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_5_9 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_9 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_24_12 ;
    input [23:0]  vector ;
  begin
    conv_u2u_24_12 = vector[11:0];
  end
  endfunction


  function  [11:0] conv_u2u_8_12 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_12 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_5_12 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_12 = {{7{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_s2u_2_9 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [10:0] conv_s2u_3_11 ;
    input signed [2:0]  vector ;
  begin
    conv_s2u_3_11 = {{8{vector[2]}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion
//  Generated from file(s):
//    2) $PROJECT_HOME/ESL_CA2.c
// ------------------------------------------------------------------


module Convolotion (
  clk, rst, in_rsc_singleport_data_in, in_rsc_singleport_addr, in_rsc_singleport_re,
      in_rsc_singleport_we, in_rsc_singleport_data_out, out_rsc_singleport_data_in,
      out_rsc_singleport_addr, out_rsc_singleport_re, out_rsc_singleport_we, out_rsc_singleport_data_out
);
  input clk;
  input rst;
  output [7:0] in_rsc_singleport_data_in;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  output in_rsc_singleport_we;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_re;
  output out_rsc_singleport_we;
  input [7:0] out_rsc_singleport_data_out;


  // Interconnect Declarations
  wire [17:0] in_rsc_singleport_addr_reg;
  wire in_rsc_singleport_re_reg;
  wire [7:0] out_rsc_singleport_data_in_reg;
  wire [17:0] out_rsc_singleport_addr_reg;
  wire out_rsc_singleport_we_reg;

  Convolotion_core Convolotion_core_inst (
      .clk(clk),
      .rst(rst),
      .in_rsc_singleport_addr(in_rsc_singleport_addr_reg),
      .in_rsc_singleport_re(in_rsc_singleport_re_reg),
      .in_rsc_singleport_data_out(in_rsc_singleport_data_out),
      .out_rsc_singleport_data_in(out_rsc_singleport_data_in_reg),
      .out_rsc_singleport_addr(out_rsc_singleport_addr_reg),
      .out_rsc_singleport_we(out_rsc_singleport_we_reg)
    );
  assign in_rsc_singleport_data_in = 8'b0;
  assign in_rsc_singleport_addr = in_rsc_singleport_addr_reg;
  assign in_rsc_singleport_re = in_rsc_singleport_re_reg;
  assign in_rsc_singleport_we = 1'b1;
  assign out_rsc_singleport_data_in = out_rsc_singleport_data_in_reg;
  assign out_rsc_singleport_addr = out_rsc_singleport_addr_reg;
  assign out_rsc_singleport_re = 1'b1;
  assign out_rsc_singleport_we = out_rsc_singleport_we_reg;
endmodule



