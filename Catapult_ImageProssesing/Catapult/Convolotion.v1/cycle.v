// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.41 Production Release
//  HLS Date:       Thu Apr  7 20:28:55 PDT 2011
// 
//  Generated by:   ss@DESKTOP-UB05SU4
//  Generated date: Fri Apr 19 10:04:32 2019
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core_wait_ctrl
// ------------------------------------------------------------------


module Convolotion_core_wait_ctrl (
  clk, rst, core_wen, in_rsc_singleport_re_core_sct, out_rsc_singleport_we_core_sct,
      mgc_start_sync_mgc_bsync_rv_rd_core_sct, mgc_start_sync_mgc_bsync_rv_vd, mgc_done_sync_mgc_bsync_rdy_rd_core_sct,
      in_rsc_singleport_oswt_1, in_rsc_singleport_iswt0_1, in_rsc_singleport_bcwt_1,
      in_rsc_singleport_re_core_psct, out_rsc_singleport_oswt, out_rsc_singleport_iswt0,
      out_rsc_singleport_we_core_psct, mgc_start_sync_mgc_bsync_rv_rd_core_psct,
      mgc_start_sync_mgc_bsync_rv_oswt, mgc_start_sync_mgc_bsync_rv_iswt0, mgc_done_sync_mgc_bsync_rdy_rd_core_psct,
      mgc_done_sync_mgc_bsync_rdy_oswt, mgc_done_sync_mgc_bsync_rdy_iswt0, in_rsc_singleport_iswt0_1_pff,
      out_rsc_singleport_iswt0_pff
);
  input clk;
  input rst;
  output core_wen;
  output in_rsc_singleport_re_core_sct;
  output out_rsc_singleport_we_core_sct;
  output mgc_start_sync_mgc_bsync_rv_rd_core_sct;
  input mgc_start_sync_mgc_bsync_rv_vd;
  output mgc_done_sync_mgc_bsync_rdy_rd_core_sct;
  input in_rsc_singleport_oswt_1;
  input in_rsc_singleport_iswt0_1;
  output in_rsc_singleport_bcwt_1;
  reg in_rsc_singleport_bcwt_1;
  input in_rsc_singleport_re_core_psct;
  input out_rsc_singleport_oswt;
  input out_rsc_singleport_iswt0;
  input out_rsc_singleport_we_core_psct;
  input mgc_start_sync_mgc_bsync_rv_rd_core_psct;
  input mgc_start_sync_mgc_bsync_rv_oswt;
  input mgc_start_sync_mgc_bsync_rv_iswt0;
  input mgc_done_sync_mgc_bsync_rdy_rd_core_psct;
  input mgc_done_sync_mgc_bsync_rdy_oswt;
  input mgc_done_sync_mgc_bsync_rdy_iswt0;
  input in_rsc_singleport_iswt0_1_pff;
  input out_rsc_singleport_iswt0_pff;


  // Interconnect Declarations
  wire in_rsc_singleport_tiswt0_1;
  wire in_rsc_singleport_biwt_1;
  reg in_rsc_singleport_icwt_1;
  reg core_wten;
  wire out_rsc_singleport_tiswt0;
  wire out_rsc_singleport_biwt;
  reg out_rsc_singleport_icwt;
  reg out_rsc_singleport_bcwt;
  wire mgc_start_sync_mgc_bsync_rv_ogwt;
  wire mgc_start_sync_mgc_bsync_rv_pdswt0;
  wire mgc_start_sync_mgc_bsync_rv_biwt;
  reg mgc_start_sync_mgc_bsync_rv_icwt;
  reg mgc_start_sync_mgc_bsync_rv_bcwt;
  wire mgc_done_sync_mgc_bsync_rdy_ogwt;
  wire mgc_done_sync_mgc_bsync_rdy_pdswt0;
  reg mgc_done_sync_mgc_bsync_rdy_icwt;
  reg mgc_done_sync_mgc_bsync_rdy_bcwt;

  assign in_rsc_singleport_tiswt0_1 = (~ core_wten) & in_rsc_singleport_iswt0_1;
  assign in_rsc_singleport_biwt_1 = in_rsc_singleport_tiswt0_1 | in_rsc_singleport_icwt_1;
  assign out_rsc_singleport_tiswt0 = (~ core_wten) & out_rsc_singleport_iswt0;
  assign out_rsc_singleport_biwt = out_rsc_singleport_tiswt0 | out_rsc_singleport_icwt;
  assign mgc_start_sync_mgc_bsync_rv_pdswt0 = (~ core_wten) & mgc_start_sync_mgc_bsync_rv_iswt0;
  assign mgc_start_sync_mgc_bsync_rv_biwt = mgc_start_sync_mgc_bsync_rv_ogwt & mgc_start_sync_mgc_bsync_rv_vd;
  assign mgc_start_sync_mgc_bsync_rv_ogwt = mgc_start_sync_mgc_bsync_rv_pdswt0 |
      mgc_start_sync_mgc_bsync_rv_icwt;
  assign mgc_start_sync_mgc_bsync_rv_rd_core_sct = mgc_start_sync_mgc_bsync_rv_rd_core_psct
      & mgc_start_sync_mgc_bsync_rv_ogwt;
  assign mgc_done_sync_mgc_bsync_rdy_pdswt0 = (~ core_wten) & mgc_done_sync_mgc_bsync_rdy_iswt0;
  assign mgc_done_sync_mgc_bsync_rdy_ogwt = mgc_done_sync_mgc_bsync_rdy_pdswt0 |
      mgc_done_sync_mgc_bsync_rdy_icwt;
  assign mgc_done_sync_mgc_bsync_rdy_rd_core_sct = mgc_done_sync_mgc_bsync_rdy_rd_core_psct
      & mgc_done_sync_mgc_bsync_rdy_ogwt;
  assign core_wen = ((~ in_rsc_singleport_oswt_1) | in_rsc_singleport_biwt_1 | in_rsc_singleport_bcwt_1)
      & ((~ out_rsc_singleport_oswt) | out_rsc_singleport_biwt | out_rsc_singleport_bcwt)
      & ((~ mgc_start_sync_mgc_bsync_rv_oswt) | mgc_start_sync_mgc_bsync_rv_biwt
      | mgc_start_sync_mgc_bsync_rv_bcwt) & ((~ mgc_done_sync_mgc_bsync_rdy_oswt)
      | mgc_done_sync_mgc_bsync_rdy_ogwt | mgc_done_sync_mgc_bsync_rdy_bcwt);
  assign in_rsc_singleport_re_core_sct = in_rsc_singleport_re_core_psct & core_wen
      & in_rsc_singleport_iswt0_1_pff;
  assign out_rsc_singleport_we_core_sct = out_rsc_singleport_we_core_psct & core_wen
      & out_rsc_singleport_iswt0_pff;
  always @(posedge clk) begin
    if ( rst ) begin
      in_rsc_singleport_icwt_1 <= 1'b0;
      in_rsc_singleport_bcwt_1 <= 1'b0;
      out_rsc_singleport_icwt <= 1'b0;
      out_rsc_singleport_bcwt <= 1'b0;
      mgc_start_sync_mgc_bsync_rv_icwt <= 1'b0;
      mgc_start_sync_mgc_bsync_rv_bcwt <= 1'b0;
      mgc_done_sync_mgc_bsync_rdy_icwt <= 1'b0;
      mgc_done_sync_mgc_bsync_rdy_bcwt <= 1'b0;
      core_wten <= 1'b0;
    end
    else begin
      in_rsc_singleport_icwt_1 <= in_rsc_singleport_icwt_1 ^ in_rsc_singleport_tiswt0_1
          ^ in_rsc_singleport_biwt_1;
      in_rsc_singleport_bcwt_1 <= in_rsc_singleport_bcwt_1 ^ in_rsc_singleport_biwt_1
          ^ (in_rsc_singleport_oswt_1 & core_wen);
      out_rsc_singleport_icwt <= out_rsc_singleport_icwt ^ out_rsc_singleport_tiswt0
          ^ out_rsc_singleport_biwt;
      out_rsc_singleport_bcwt <= out_rsc_singleport_bcwt ^ out_rsc_singleport_biwt
          ^ (out_rsc_singleport_oswt & core_wen);
      mgc_start_sync_mgc_bsync_rv_icwt <= mgc_start_sync_mgc_bsync_rv_icwt ^ mgc_start_sync_mgc_bsync_rv_pdswt0
          ^ mgc_start_sync_mgc_bsync_rv_biwt;
      mgc_start_sync_mgc_bsync_rv_bcwt <= mgc_start_sync_mgc_bsync_rv_bcwt ^ mgc_start_sync_mgc_bsync_rv_biwt
          ^ (mgc_start_sync_mgc_bsync_rv_oswt & core_wen);
      mgc_done_sync_mgc_bsync_rdy_icwt <= mgc_done_sync_mgc_bsync_rdy_icwt ^ mgc_done_sync_mgc_bsync_rdy_pdswt0
          ^ mgc_done_sync_mgc_bsync_rdy_ogwt;
      mgc_done_sync_mgc_bsync_rdy_bcwt <= mgc_done_sync_mgc_bsync_rdy_bcwt ^ mgc_done_sync_mgc_bsync_rdy_ogwt
          ^ (mgc_done_sync_mgc_bsync_rdy_oswt & core_wen);
      core_wten <= ~ core_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core
// ------------------------------------------------------------------


module Convolotion_core (
  clk, rst, in_rsc_singleport_data_out, in_rsc_singleport_addr_core, in_rsc_singleport_re_core_sct,
      out_rsc_singleport_data_in_core, out_rsc_singleport_addr_core, out_rsc_singleport_we_core_sct,
      mgc_start_sync_mgc_bsync_rv_rd_core_sct, mgc_start_sync_mgc_bsync_rv_vd, mgc_done_sync_mgc_bsync_rdy_rd_core_sct
);
  input clk;
  input rst;
  input [7:0] in_rsc_singleport_data_out;
  output [17:0] in_rsc_singleport_addr_core;
  output in_rsc_singleport_re_core_sct;
  output [7:0] out_rsc_singleport_data_in_core;
  output [17:0] out_rsc_singleport_addr_core;
  output out_rsc_singleport_we_core_sct;
  output mgc_start_sync_mgc_bsync_rv_rd_core_sct;
  input mgc_start_sync_mgc_bsync_rv_vd;
  output mgc_done_sync_mgc_bsync_rdy_rd_core_sct;


  // Interconnect Declarations
  reg in_rsc_singleport_oswt_1;
  reg in_rsc_singleport_iswt0_1;
  wire in_rsc_singleport_bcwt_1;
  reg in_rsc_singleport_re_core_psct;
  wire [7:0] in_rsc_singleport_data_out_mxwt;
  reg [7:0] in_rsc_singleport_data_out_bfwt;
  reg out_rsc_singleport_oswt;
  reg out_rsc_singleport_iswt0;
  reg out_rsc_singleport_we_core_psct;
  reg mgc_start_sync_mgc_bsync_rv_rd_core_psct;
  reg mgc_start_sync_mgc_bsync_rv_oswt;
  reg mgc_start_sync_mgc_bsync_rv_iswt0;
  reg mgc_done_sync_mgc_bsync_rdy_rd_core_psct;
  reg mgc_done_sync_mgc_bsync_rdy_oswt;
  reg mgc_done_sync_mgc_bsync_rdy_iswt0;
  wire core_wen;
  wire in_rsc_singleport_re_core_sct_reg;
  reg in_rsc_singleport_iswt0_1_pff;
  wire out_rsc_singleport_we_core_sct_reg;
  reg out_rsc_singleport_iswt0_pff;
  reg [8:0] in_rsc_singleport_addr_core_reg_sg1;
  reg [8:0] in_rsc_singleport_addr_core_reg_1;
  reg out_rsc_singleport_data_in_core_reg_sg2;
  reg [5:0] out_rsc_singleport_data_in_core_reg_sg1;
  reg out_rsc_singleport_data_in_core_reg_1;
  reg [8:0] out_rsc_singleport_addr_core_reg_sg1;
  reg [8:0] out_rsc_singleport_addr_core_reg_1;

  Convolotion_core_wait_ctrl Convolotion_core_wait_ctrl_inst (
      .clk(clk),
      .rst(rst),
      .core_wen(core_wen),
      .in_rsc_singleport_re_core_sct(in_rsc_singleport_re_core_sct_reg),
      .out_rsc_singleport_we_core_sct(out_rsc_singleport_we_core_sct_reg),
      .mgc_start_sync_mgc_bsync_rv_rd_core_sct(mgc_start_sync_mgc_bsync_rv_rd_core_sct),
      .mgc_start_sync_mgc_bsync_rv_vd(mgc_start_sync_mgc_bsync_rv_vd),
      .mgc_done_sync_mgc_bsync_rdy_rd_core_sct(mgc_done_sync_mgc_bsync_rdy_rd_core_sct),
      .in_rsc_singleport_oswt_1(in_rsc_singleport_oswt_1),
      .in_rsc_singleport_iswt0_1(in_rsc_singleport_iswt0_1),
      .in_rsc_singleport_bcwt_1(in_rsc_singleport_bcwt_1),
      .in_rsc_singleport_re_core_psct(in_rsc_singleport_re_core_psct),
      .out_rsc_singleport_oswt(out_rsc_singleport_oswt),
      .out_rsc_singleport_iswt0(out_rsc_singleport_iswt0),
      .out_rsc_singleport_we_core_psct(out_rsc_singleport_we_core_psct),
      .mgc_start_sync_mgc_bsync_rv_rd_core_psct(mgc_start_sync_mgc_bsync_rv_rd_core_psct),
      .mgc_start_sync_mgc_bsync_rv_oswt(mgc_start_sync_mgc_bsync_rv_oswt),
      .mgc_start_sync_mgc_bsync_rv_iswt0(mgc_start_sync_mgc_bsync_rv_iswt0),
      .mgc_done_sync_mgc_bsync_rdy_rd_core_psct(mgc_done_sync_mgc_bsync_rdy_rd_core_psct),
      .mgc_done_sync_mgc_bsync_rdy_oswt(mgc_done_sync_mgc_bsync_rdy_oswt),
      .mgc_done_sync_mgc_bsync_rdy_iswt0(mgc_done_sync_mgc_bsync_rdy_iswt0),
      .in_rsc_singleport_iswt0_1_pff(in_rsc_singleport_iswt0_1_pff),
      .out_rsc_singleport_iswt0_pff(out_rsc_singleport_iswt0_pff)
    );
  always begin : core
    // Interconnect Declarations
    reg [5:0] Result_sg1_sva;
    reg Result_1_sva;
    reg Result_sg2_sva;
    reg [1:0] Kcolumn_1_sva;
    reg [5:0] Result_sg1_lpi_4;
    reg Result_1_lpi_4;
    reg Result_sg2_lpi_4;
    reg [1:0] Krow_1_sva;
    reg [10:0] conv1_sva;
    reg [10:0] conv2_sva;
    reg for_for_for_for_lor_1_lpi_4_dfm;
    reg for_for_for_for_lor_sva_1;
    reg [8:0] slc_sat_sva;
    reg [7:0] for_for_for_for_else_ac_fixed_cctor_sva;
    reg Result_sg2_lpi_4_dfm;
    reg [5:0] Result_sg1_lpi_4_dfm;
    reg Result_1_lpi_4_dfm;
    reg [1:0] Krow_1_sva_1;
    reg [1:0] Kcolumn_1_sva_1;
    reg [9:0] Drow_1_sva_1;
    reg [9:0] Dcolumn_1_sva_1;
    reg for_for_for_for_lor_lpi_4_dfm_st;
    reg [1:0] for_for_for_for_else_mux_itm;
    reg for_for_for_for_else_mux_1_itm;
    reg for_for_for_for_slc_itm;
    reg [8:0] Dcolumn_1_sva_2;
    reg [8:0] Drow_1_sva_2;
    reg [2:0] for_for_for_for_else_acc_6_sdt;
    reg [2:0] for_for_for_for_else_acc_7_psp;
    reg for_for_for_not_tcond;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        Dcolumn_1_sva_2 = 9'b0;
        in_rsc_singleport_addr_core_reg_1 <= 9'b0;
        in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
        in_rsc_singleport_iswt0_1_pff <= 1'b0;
        in_rsc_singleport_re_core_psct <= 1'b0;
        out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
        out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
        out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
        out_rsc_singleport_iswt0_pff <= 1'b0;
        out_rsc_singleport_addr_core_reg_1 <= 9'b0;
        out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
        out_rsc_singleport_we_core_psct <= 1'b0;
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( core_wen )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        in_rsc_singleport_oswt_1 <= 1'b0;
        out_rsc_singleport_oswt <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b1;
        mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b1;
        mgc_start_sync_mgc_bsync_rv_oswt <= 1'b1;
        in_rsc_singleport_addr_core_reg_1 <= 9'b0;
        in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
        in_rsc_singleport_iswt0_1_pff <= 1'b0;
        in_rsc_singleport_re_core_psct <= 1'b0;
        out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
        out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
        out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
        out_rsc_singleport_iswt0_pff <= 1'b0;
        out_rsc_singleport_addr_core_reg_1 <= 9'b0;
        out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
        out_rsc_singleport_we_core_psct <= 1'b0;
        begin : waitLoop1Exit
          forever begin : waitLoop1
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( core_wen )
              disable waitLoop1Exit;
          end
        end
        // C-Step 2 of Loop 'main'
        in_rsc_singleport_oswt_1 <= 1'b0;
        out_rsc_singleport_oswt <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
        begin : for_0Exit
          forever begin : for_0
            // C-Step 0 of Loop 'for_0'
            Drow_1_sva_2 = 9'b0;
            begin : for_forExit
              forever begin : for_for
                // C-Step 0 of Loop 'for_for'
                Result_sg1_sva = 6'b0;
                Result_1_sva = 1'b0;
                Result_sg2_sva = 1'b0;
                Kcolumn_1_sva = 2'b0;
                begin : for_for_forExit
                  forever begin : for_for_for
                    // C-Step 0 of Loop 'for_for_for'
                    Result_sg2_lpi_4 = Result_sg2_sva;
                    Result_1_lpi_4 = Result_1_sva;
                    Result_sg1_lpi_4 = Result_sg1_sva;
                    Krow_1_sva = 2'b0;
                    begin : for_for_for_forExit
                      forever begin : for_for_for_for
                        // C-Step 0 of Loop 'for_for_for_for'
                        in_rsc_singleport_addr_core_reg_1 <= 9'b0;
                        in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                        in_rsc_singleport_iswt0_1_pff <= 1'b0;
                        in_rsc_singleport_re_core_psct <= 1'b0;
                        out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
                        out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
                        out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
                        out_rsc_singleport_iswt0_pff <= 1'b0;
                        out_rsc_singleport_addr_core_reg_1 <= 9'b0;
                        out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                        out_rsc_singleport_we_core_psct <= 1'b0;
                        for_for_for_for_lor_sva_1 = 1'b0;
                        conv1_sva = conv_s2s_2_11(Kcolumn_1_sva + 2'b11) + conv_u2s_9_11(Dcolumn_1_sva_2);
                        conv2_sva = conv_s2s_2_11(Krow_1_sva + 2'b11) + conv_u2s_9_11(Drow_1_sva_2);
                        for_for_for_for_lor_1_lpi_4_dfm = (conv2_sva[10]) | (conv1_sva[9])
                            | (conv1_sva[10]);
                        if ( for_for_for_for_lor_1_lpi_4_dfm ) begin
                        end
                        else begin
                          for_for_for_for_lor_sva_1 = readslicef_2_1_1(((~ (conv2_sva[10:9]))
                              + 2'b1));
                        end
                        for_for_for_for_lor_lpi_4_dfm_st = for_for_for_for_lor_sva_1
                            | for_for_for_for_lor_1_lpi_4_dfm;
                        if ( for_for_for_for_lor_lpi_4_dfm_st ) begin
                        end
                        else begin
                          in_rsc_singleport_re_core_psct <= 1'b1;
                          in_rsc_singleport_addr_core_reg_1 <= conv1_sva[8:0];
                          in_rsc_singleport_addr_core_reg_sg1 <= (conv2_sva[8:0])
                              + conv_s2u_2_9(conv1_sva[10:9]);
                          in_rsc_singleport_iswt0_1_pff <= 1'b1;
                        end
                        begin : waitLoop2Exit
                          forever begin : waitLoop2
                            @(posedge clk);
                            if ( rst )
                              disable mainExit;
                            if ( core_wen )
                              disable waitLoop2Exit;
                          end
                        end
                        // C-Step 1 of Loop 'for_for_for_for'
                        in_rsc_singleport_oswt_1 <= 1'b0;
                        out_rsc_singleport_oswt <= 1'b0;
                        mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
                        mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
                        mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
                        mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
                        mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
                        mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
                        if ( for_for_for_for_lor_lpi_4_dfm_st ) begin
                        end
                        else begin
                          for_for_for_for_else_acc_6_sdt = conv_u2u_2_3(Krow_1_sva)
                              + conv_u2u_2_3(Kcolumn_1_sva);
                          for_for_for_for_else_acc_7_psp = conv_u2u_2_3(for_for_for_for_else_acc_6_sdt[2:1])
                              + conv_u2u_2_3(Krow_1_sva);
                          in_rsc_singleport_oswt_1 <= 1'b1;
                          for_for_for_for_else_mux_itm = MUX_v_2_16_2({2'b1 , 2'b10
                              , 2'b1 , 2'b10 , 2'b0 , 2'b10 , 2'b1 , 2'b10 , 2'b1
                              , 2'b0 , 2'b0 , 2'b0 , 2'b0 , 2'b0 , 2'b0 , 2'b0},
                              {for_for_for_for_else_acc_7_psp , (for_for_for_for_else_acc_6_sdt[0])});
                          for_for_for_for_else_mux_1_itm = MUX_s_1_16_2({1'b0 , 1'b0
                              , 1'b0 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 ,
                              1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0}, {for_for_for_for_else_acc_7_psp
                              , (for_for_for_for_else_acc_6_sdt[0])});
                        end
                        Krow_1_sva_1 = Krow_1_sva + 2'b1;
                        for_for_for_for_slc_itm = readslicef_3_1_2((({1'b1 , Krow_1_sva_1})
                            + 3'b1));
                        in_rsc_singleport_addr_core_reg_1 <= 9'b0;
                        in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                        in_rsc_singleport_iswt0_1_pff <= 1'b0;
                        in_rsc_singleport_re_core_psct <= 1'b0;
                        out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
                        out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
                        out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
                        out_rsc_singleport_iswt0_pff <= 1'b0;
                        out_rsc_singleport_addr_core_reg_1 <= 9'b0;
                        out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                        out_rsc_singleport_we_core_psct <= 1'b0;
                        begin : waitLoop3Exit
                          forever begin : waitLoop3
                            @(posedge clk);
                            if ( rst )
                              disable mainExit;
                            if ( core_wen )
                              disable waitLoop3Exit;
                          end
                        end
                        // C-Step 2 of Loop 'for_for_for_for'
                        in_rsc_singleport_oswt_1 <= 1'b0;
                        out_rsc_singleport_oswt <= 1'b0;
                        mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
                        mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
                        mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
                        mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
                        mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
                        mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
                        if ( for_for_for_for_lor_lpi_4_dfm_st ) begin
                          Result_sg2_lpi_4_dfm = Result_sg2_lpi_4;
                          Result_sg1_lpi_4_dfm = Result_sg1_lpi_4;
                          Result_1_lpi_4_dfm = Result_1_lpi_4;
                        end
                        else begin
                          slc_sat_sva = conv_u2u_8_9({Result_sg2_lpi_4 , Result_sg1_lpi_4
                              , Result_1_lpi_4}) + conv_u2u_5_9(readslicef_12_5_7(conv_u2u_24_12(conv_u2u_8_12(in_rsc_singleport_data_out_mxwt)
                              * conv_u2u_5_12({for_for_for_for_else_mux_itm , 1'b0
                              , ({{1{for_for_for_for_else_mux_1_itm}}, for_for_for_for_else_mux_1_itm})}))));
                          for_for_for_for_else_ac_fixed_cctor_sva = (slc_sat_sva[7:0])
                              | (signext_8_1(slc_sat_sva[8]));
                          Result_sg2_lpi_4_dfm = for_for_for_for_else_ac_fixed_cctor_sva[7];
                          Result_sg1_lpi_4_dfm = for_for_for_for_else_ac_fixed_cctor_sva[6:1];
                          Result_1_lpi_4_dfm = for_for_for_for_else_ac_fixed_cctor_sva[0];
                        end
                        if ( ~ for_for_for_for_slc_itm )
                          disable for_for_for_forExit;
                        Result_sg2_lpi_4 = Result_sg2_lpi_4_dfm;
                        Result_sg1_lpi_4 = Result_sg1_lpi_4_dfm;
                        Result_1_lpi_4 = Result_1_lpi_4_dfm;
                        Krow_1_sva = Krow_1_sva_1;
                      end
                    end
                    in_rsc_singleport_addr_core_reg_1 <= 9'b0;
                    in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                    in_rsc_singleport_iswt0_1_pff <= 1'b0;
                    in_rsc_singleport_re_core_psct <= 1'b0;
                    out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
                    out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
                    out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
                    out_rsc_singleport_iswt0_pff <= 1'b0;
                    out_rsc_singleport_addr_core_reg_1 <= 9'b0;
                    out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                    out_rsc_singleport_we_core_psct <= 1'b0;
                    Kcolumn_1_sva_1 = Kcolumn_1_sva + 2'b1;
                    for_for_for_not_tcond = ~ (readslicef_3_1_2((({1'b1 , Kcolumn_1_sva_1})
                        + 3'b1)));
                    if ( for_for_for_not_tcond ) begin
                      out_rsc_singleport_we_core_psct <= 1'b1;
                      out_rsc_singleport_addr_core_reg_1 <= Dcolumn_1_sva_2;
                      out_rsc_singleport_addr_core_reg_sg1 <= Drow_1_sva_2;
                      out_rsc_singleport_data_in_core_reg_sg1 <= Result_sg1_lpi_4_dfm;
                      out_rsc_singleport_data_in_core_reg_1 <= Result_1_lpi_4_dfm;
                      out_rsc_singleport_data_in_core_reg_sg2 <= Result_sg2_lpi_4_dfm;
                      out_rsc_singleport_iswt0_pff <= 1'b1;
                    end
                    begin : waitLoop4Exit
                      forever begin : waitLoop4
                        @(posedge clk);
                        if ( rst )
                          disable mainExit;
                        if ( core_wen )
                          disable waitLoop4Exit;
                      end
                    end
                    // C-Step 1 of Loop 'for_for_for'
                    in_rsc_singleport_oswt_1 <= 1'b0;
                    out_rsc_singleport_oswt <= 1'b0;
                    mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
                    mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
                    mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
                    mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
                    mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
                    mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
                    if ( for_for_for_not_tcond )
                      disable for_for_forExit;
                    Result_sg2_sva = Result_sg2_lpi_4_dfm;
                    Result_sg1_sva = Result_sg1_lpi_4_dfm;
                    Result_1_sva = Result_1_lpi_4_dfm;
                    Kcolumn_1_sva = Kcolumn_1_sva_1;
                  end
                end
                out_rsc_singleport_oswt <= 1'b1;
                in_rsc_singleport_addr_core_reg_1 <= 9'b0;
                in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                in_rsc_singleport_iswt0_1_pff <= 1'b0;
                in_rsc_singleport_re_core_psct <= 1'b0;
                out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
                out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
                out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
                out_rsc_singleport_iswt0_pff <= 1'b0;
                out_rsc_singleport_addr_core_reg_1 <= 9'b0;
                out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
                out_rsc_singleport_we_core_psct <= 1'b0;
                begin : waitLoop5Exit
                  forever begin : waitLoop5
                    @(posedge clk);
                    if ( rst )
                      disable mainExit;
                    if ( core_wen )
                      disable waitLoop5Exit;
                  end
                end
                // C-Step 1 of Loop 'for_for'
                in_rsc_singleport_oswt_1 <= 1'b0;
                out_rsc_singleport_oswt <= 1'b0;
                mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
                mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
                mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
                mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
                mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
                mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
                Drow_1_sva_1 = conv_u2u_9_10(Drow_1_sva_2) + 10'b1;
                if ( Drow_1_sva_1[9] )
                  disable for_forExit;
                Drow_1_sva_2 = Drow_1_sva_1[8:0];
              end
            end
            in_rsc_singleport_addr_core_reg_1 <= 9'b0;
            in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
            in_rsc_singleport_iswt0_1_pff <= 1'b0;
            in_rsc_singleport_re_core_psct <= 1'b0;
            out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
            out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
            out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
            out_rsc_singleport_iswt0_pff <= 1'b0;
            out_rsc_singleport_addr_core_reg_1 <= 9'b0;
            out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
            out_rsc_singleport_we_core_psct <= 1'b0;
            begin : waitLoop6Exit
              forever begin : waitLoop6
                @(posedge clk);
                if ( rst )
                  disable mainExit;
                if ( core_wen )
                  disable waitLoop6Exit;
              end
            end
            // C-Step 1 of Loop 'for_0'
            in_rsc_singleport_oswt_1 <= 1'b0;
            out_rsc_singleport_oswt <= 1'b0;
            mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
            mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
            mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
            mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
            mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
            mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
            Dcolumn_1_sva_1 = conv_u2u_9_10(Dcolumn_1_sva_2) + 10'b1;
            if ( Dcolumn_1_sva_1[9] )
              disable for_0Exit;
            Dcolumn_1_sva_2 = Dcolumn_1_sva_1[8:0];
          end
        end
        mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b1;
        mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b1;
        mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b1;
        in_rsc_singleport_addr_core_reg_1 <= 9'b0;
        in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
        in_rsc_singleport_iswt0_1_pff <= 1'b0;
        in_rsc_singleport_re_core_psct <= 1'b0;
        out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
        out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
        out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
        out_rsc_singleport_iswt0_pff <= 1'b0;
        out_rsc_singleport_addr_core_reg_1 <= 9'b0;
        out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
        out_rsc_singleport_we_core_psct <= 1'b0;
        begin : waitLoop7Exit
          forever begin : waitLoop7
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( core_wen )
              disable waitLoop7Exit;
          end
        end
        // C-Step 3 of Loop 'main'
        in_rsc_singleport_oswt_1 <= 1'b0;
        out_rsc_singleport_oswt <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
        mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
        mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
      end
    end
    for_for_for_for_else_mux_1_itm = 1'b0;
    for_for_for_for_else_mux_itm = 2'b0;
    mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
    mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
    mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
    mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
    mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
    mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
    out_rsc_singleport_we_core_psct <= 1'b0;
    out_rsc_singleport_iswt0_pff <= 1'b0;
    out_rsc_singleport_oswt <= 1'b0;
    in_rsc_singleport_re_core_psct <= 1'b0;
    in_rsc_singleport_iswt0_1_pff <= 1'b0;
    in_rsc_singleport_oswt_1 <= 1'b0;
    out_rsc_singleport_addr_core_reg_1 <= 9'b0;
    out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
    out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
    out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
    out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
    in_rsc_singleport_addr_core_reg_1 <= 9'b0;
    in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
    in_rsc_singleport_addr_core_reg_1 <= 9'b0;
    in_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
    in_rsc_singleport_oswt_1 <= 1'b0;
    in_rsc_singleport_iswt0_1_pff <= 1'b0;
    in_rsc_singleport_re_core_psct <= 1'b0;
    out_rsc_singleport_data_in_core_reg_sg1 <= 6'b0;
    out_rsc_singleport_data_in_core_reg_1 <= 1'b0;
    out_rsc_singleport_data_in_core_reg_sg2 <= 1'b0;
    out_rsc_singleport_oswt <= 1'b0;
    out_rsc_singleport_iswt0_pff <= 1'b0;
    out_rsc_singleport_addr_core_reg_1 <= 9'b0;
    out_rsc_singleport_addr_core_reg_sg1 <= 9'b0;
    out_rsc_singleport_we_core_psct <= 1'b0;
    mgc_start_sync_mgc_bsync_rv_rd_core_psct <= 1'b0;
    mgc_start_sync_mgc_bsync_rv_oswt <= 1'b0;
    mgc_start_sync_mgc_bsync_rv_iswt0 <= 1'b0;
    mgc_done_sync_mgc_bsync_rdy_rd_core_psct <= 1'b0;
    mgc_done_sync_mgc_bsync_rdy_oswt <= 1'b0;
    mgc_done_sync_mgc_bsync_rdy_iswt0 <= 1'b0;
  end

  assign in_rsc_singleport_data_out_mxwt = MUX_v_8_2_2({in_rsc_singleport_data_out
      , in_rsc_singleport_data_out_bfwt}, in_rsc_singleport_bcwt_1);
  assign in_rsc_singleport_addr_core = {in_rsc_singleport_addr_core_reg_sg1 , in_rsc_singleport_addr_core_reg_1};
  assign in_rsc_singleport_re_core_sct = in_rsc_singleport_re_core_sct_reg;
  assign out_rsc_singleport_data_in_core = {out_rsc_singleport_data_in_core_reg_sg2
      , out_rsc_singleport_data_in_core_reg_sg1 , out_rsc_singleport_data_in_core_reg_1};
  assign out_rsc_singleport_addr_core = {out_rsc_singleport_addr_core_reg_sg1 , out_rsc_singleport_addr_core_reg_1};
  assign out_rsc_singleport_we_core_sct = out_rsc_singleport_we_core_sct_reg;
  always @(posedge clk) begin
    if ( rst ) begin
      in_rsc_singleport_data_out_bfwt <= 8'b0;
    end
    else begin
      in_rsc_singleport_data_out_bfwt <= in_rsc_singleport_data_out_mxwt;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      in_rsc_singleport_iswt0_1 <= 1'b0;
      out_rsc_singleport_iswt0 <= 1'b0;
    end
    else if ( core_wen ) begin
      in_rsc_singleport_iswt0_1 <= in_rsc_singleport_iswt0_1_pff;
      out_rsc_singleport_iswt0 <= out_rsc_singleport_iswt0_pff;
    end
  end

  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function [1:0] MUX_v_2_16_2;
    input [31:0] inputs;
    input [3:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[31:30];
      end
      4'b0001 : begin
        result = inputs[29:28];
      end
      4'b0010 : begin
        result = inputs[27:26];
      end
      4'b0011 : begin
        result = inputs[25:24];
      end
      4'b0100 : begin
        result = inputs[23:22];
      end
      4'b0101 : begin
        result = inputs[21:20];
      end
      4'b0110 : begin
        result = inputs[19:18];
      end
      4'b0111 : begin
        result = inputs[17:16];
      end
      4'b1000 : begin
        result = inputs[15:14];
      end
      4'b1001 : begin
        result = inputs[13:12];
      end
      4'b1010 : begin
        result = inputs[11:10];
      end
      4'b1011 : begin
        result = inputs[9:8];
      end
      4'b1100 : begin
        result = inputs[7:6];
      end
      4'b1101 : begin
        result = inputs[5:4];
      end
      4'b1110 : begin
        result = inputs[3:2];
      end
      4'b1111 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[31:30];
      end
    endcase
    MUX_v_2_16_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_16_2;
    input [15:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[15:15];
      end
      4'b0001 : begin
        result = inputs[14:14];
      end
      4'b0010 : begin
        result = inputs[13:13];
      end
      4'b0011 : begin
        result = inputs[12:12];
      end
      4'b0100 : begin
        result = inputs[11:11];
      end
      4'b0101 : begin
        result = inputs[10:10];
      end
      4'b0110 : begin
        result = inputs[9:9];
      end
      4'b0111 : begin
        result = inputs[8:8];
      end
      4'b1000 : begin
        result = inputs[7:7];
      end
      4'b1001 : begin
        result = inputs[6:6];
      end
      4'b1010 : begin
        result = inputs[5:5];
      end
      4'b1011 : begin
        result = inputs[4:4];
      end
      4'b1100 : begin
        result = inputs[3:3];
      end
      4'b1101 : begin
        result = inputs[2:2];
      end
      4'b1110 : begin
        result = inputs[1:1];
      end
      4'b1111 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[15:15];
      end
    endcase
    MUX_s_1_16_2 = result;
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [4:0] readslicef_12_5_7;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_12_5_7 = tmp[4:0];
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function signed [10:0] conv_s2s_2_11 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_11 = {{9{vector[1]}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_s2u_2_9 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_5_9 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_9 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_24_12 ;
    input [23:0]  vector ;
  begin
    conv_u2u_24_12 = vector[11:0];
  end
  endfunction


  function  [11:0] conv_u2u_8_12 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_12 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_5_12 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_12 = {{7{1'b0}}, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion
//  Generated from file(s):
//    2) $PROJECT_HOME/ESL_CA2.c
// ------------------------------------------------------------------


module Convolotion (
  start, ready, done, clk, rst, in_rsc_singleport_data_in, in_rsc_singleport_addr,
      in_rsc_singleport_re, in_rsc_singleport_we, in_rsc_singleport_data_out, out_rsc_singleport_data_in,
      out_rsc_singleport_addr, out_rsc_singleport_re, out_rsc_singleport_we, out_rsc_singleport_data_out
);
  input start;
  output ready;
  output done;
  input clk;
  input rst;
  output [7:0] in_rsc_singleport_data_in;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  output in_rsc_singleport_we;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_re;
  output out_rsc_singleport_we;
  input [7:0] out_rsc_singleport_data_out;


  // Interconnect Declarations
  wire [17:0] in_rsc_singleport_addr_core;
  wire in_rsc_singleport_re_core_sct;
  wire [7:0] out_rsc_singleport_data_in_core;
  wire [17:0] out_rsc_singleport_addr_core;
  wire out_rsc_singleport_we_core_sct;
  wire mgc_start_sync_mgc_bsync_rv_rd_core_sct;
  wire mgc_start_sync_mgc_bsync_rv_vd;
  wire mgc_done_sync_mgc_bsync_rdy_rd_core_sct;

  mgc_bsync_rv #(.rscid(4),
  .ready(1),
  .valid(1)) mgc_start_sync_mgc_bsync_rv (
      .rd(mgc_start_sync_mgc_bsync_rv_rd_core_sct),
      .vd(mgc_start_sync_mgc_bsync_rv_vd),
      .rz(ready),
      .vz(start)
    );
  mgc_bsync_rdy #(.rscid(5),
  .ready(1),
  .valid(0)) mgc_done_sync_mgc_bsync_rdy (
      .rd(mgc_done_sync_mgc_bsync_rdy_rd_core_sct),
      .rz(done)
    );
  Convolotion_core Convolotion_core_inst (
      .clk(clk),
      .rst(rst),
      .in_rsc_singleport_data_out(in_rsc_singleport_data_out),
      .in_rsc_singleport_addr_core(in_rsc_singleport_addr_core),
      .in_rsc_singleport_re_core_sct(in_rsc_singleport_re_core_sct),
      .out_rsc_singleport_data_in_core(out_rsc_singleport_data_in_core),
      .out_rsc_singleport_addr_core(out_rsc_singleport_addr_core),
      .out_rsc_singleport_we_core_sct(out_rsc_singleport_we_core_sct),
      .mgc_start_sync_mgc_bsync_rv_rd_core_sct(mgc_start_sync_mgc_bsync_rv_rd_core_sct),
      .mgc_start_sync_mgc_bsync_rv_vd(mgc_start_sync_mgc_bsync_rv_vd),
      .mgc_done_sync_mgc_bsync_rdy_rd_core_sct(mgc_done_sync_mgc_bsync_rdy_rd_core_sct)
    );
  assign in_rsc_singleport_data_in = 8'b0;
  assign in_rsc_singleport_addr = in_rsc_singleport_addr_core;
  assign in_rsc_singleport_re = ~ in_rsc_singleport_re_core_sct;
  assign in_rsc_singleport_we = 1'b1;
  assign out_rsc_singleport_data_in = out_rsc_singleport_data_in_core;
  assign out_rsc_singleport_addr = out_rsc_singleport_addr_core;
  assign out_rsc_singleport_re = 1'b1;
  assign out_rsc_singleport_we = ~ out_rsc_singleport_we_core_sct;
endmodule



