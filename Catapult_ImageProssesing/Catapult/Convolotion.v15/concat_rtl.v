
//------> ./rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.41 Production Release
//  HLS Date:       Thu Apr  7 20:28:55 PDT 2011
// 
//  Generated by:   ss@DESKTOP-UB05SU4
//  Generated date: Sat Apr 20 18:47:54 2019
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module Convolotion_core_fsm (
  clk, rst, fsm_output, st_for_for_for_3_tr0, st_for_for_tr0, st_for_tr0
);
  input clk;
  input rst;
  output [6:0] fsm_output;
  reg [6:0] fsm_output;
  input st_for_for_for_3_tr0;
  input st_for_for_tr0;
  input st_for_tr0;


  // FSM State Type Declaration for Convolotion_core_fsm_1
  parameter
    st_main = 3'd0,
    st_for_for_for = 3'd1,
    st_for_for_for_1 = 3'd2,
    st_for_for_for_2 = 3'd3,
    st_for_for_for_3 = 3'd4,
    st_for_for = 3'd5,
    st_for = 3'd6,
    state_x = 3'b000;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;

  always @(st_for_for_for_3_tr0 or st_for_for_tr0 or st_for_tr0 or state_var)
  begin : Convolotion_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 7'b1;
        state_var_NS = st_for_for_for;
      end
      st_for_for_for : begin
        fsm_output = 7'b10;
        state_var_NS = st_for_for_for_1;
      end
      st_for_for_for_1 : begin
        fsm_output = 7'b100;
        state_var_NS = st_for_for_for_2;
      end
      st_for_for_for_2 : begin
        fsm_output = 7'b1000;
        state_var_NS = st_for_for_for_3;
      end
      st_for_for_for_3 : begin
        fsm_output = 7'b10000;
        if ( st_for_for_for_3_tr0 ) begin
          state_var_NS = st_for_for;
        end
        else begin
          state_var_NS = st_for_for_for;
        end
      end
      st_for_for : begin
        fsm_output = 7'b100000;
        if ( st_for_for_tr0 ) begin
          state_var_NS = st_for;
        end
        else begin
          state_var_NS = st_for_for_for;
        end
      end
      st_for : begin
        fsm_output = 7'b1000000;
        if ( st_for_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_for_for_for;
        end
      end
      default : begin
        fsm_output = 7'b0000000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core
// ------------------------------------------------------------------


module Convolotion_core (
  clk, rst, in_rsc_singleport_addr, in_rsc_singleport_re, in_rsc_singleport_data_out,
      out_rsc_singleport_data_in, out_rsc_singleport_addr, out_rsc_singleport_we
);
  input clk;
  input rst;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_we;


  // Interconnect Declarations
  wire [6:0] fsm_output;
  wire [9:0] for_for_for_for_3_acc_3_tmp;
  wire [10:0] xfor_for_for_for_3_acc_3_tmp;
  wire [9:0] for_for_for_for_1_acc_3_tmp;
  wire [10:0] xfor_for_for_for_1_acc_3_tmp;
  wire or_dcpl_16;
  wire or_dcpl_18;
  wire and_dcpl_11;
  reg [5:0] Result_sg1_sva;
  reg Result_1_sva;
  reg Result_sg2_sva;
  reg [1:0] Kcolumn_1_reg;
  reg for_for_for_for_lor_7_lpi_3_dfm;
  reg for_for_for_for_lor_lpi_3_dfm;
  reg for_for_for_for_lor_5_lpi_3_dfm_st;
  reg [8:0] for_for_for_for_1_else_acc_itm;
  reg [8:0] for_for_for_for_1_else_slc_conv1_2_itm;
  reg [1:0] for_for_for_for_else_mux_itm;
  reg [8:0] for_for_for_for_acc_itm;
  reg for_for_for_for_else_or_itm;
  reg for_for_for_for_else_or_1_itm;
  reg [4:0] for_for_for_for_2_else_slc_for_for_for_for_else_mul_1_sdt_itm;
  reg [1:0] for_for_for_for_else_mux_1_itm;
  reg [4:0] for_for_for_for_3_else_slc_for_for_for_for_else_mul_1_sdt_itm;
  reg for_for_for_slc_itm;
  reg [8:0] Dcolumn_1_sva_2;
  reg [8:0] Drow_1_sva_2;
  wire or_19_cse;
  wire for_for_for_for_and_1_cse;
  wire for_for_for_for_and_cse;
  wire Result_sg2_sva_mx1;
  wire [5:0] Result_sg1_sva_dfm_2;
  wire Result_1_sva_mx1;
  wire [10:0] z_out;
  wire [11:0] xz_out;
  wire [11:0] z_out_1;
  wire [12:0] xz_out_1;
  wire [1:0] Kcolumn_1_sva_1;
  wire [2:0] xKcolumn_1_sva_1;
  wire for_for_for_for_else_and_1_cse;
  wire for_for_for_for_else_and_2_cse;
  wire for_for_for_for_else_nor_1_cse;
  wire [1:0] for_for_for_for_acc_7_cse;
  wire [2:0] xfor_for_for_for_acc_7_cse;
  wire for_for_for_for_lor_7_lpi_3_dfm_mx0w0;
  wire Result_1_sva_dfm_mx0;
  wire [5:0] Result_sg1_sva_dfm_mx0;
  wire Result_sg2_sva_dfm_mx0;
  wire [7:0] for_for_for_for_else_ac_fixed_cctor_1_sva;
  wire [8:0] slc_sat_1_sva;
  wire [9:0] xslc_sat_1_sva;
  wire [7:0] for_for_for_for_else_ac_fixed_cctor_2_sva;
  wire [8:0] slc_sat_2_sva;
  wire [9:0] xslc_sat_2_sva;
  wire [7:0] for_for_for_for_else_ac_fixed_cctor_sva;
  wire [8:0] slc_sat_sva;
  wire [9:0] xslc_sat_sva;

  wire[0:0] for_for_for_for_mux_8_nl;
  wire[8:0] mux1h_7_nl;
  wire[8:0] mux_27_nl;
  wire[1:0] mux_20_nl;
  wire[1:0] mux1h_42_nl;
  Convolotion_core_fsm Convolotion_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .st_for_for_for_3_tr0((~ for_for_for_slc_itm)),
      .st_for_for_tr0((for_for_for_for_3_acc_3_tmp[9])),
      .st_for_tr0((z_out[9]))
    );
  assign xKcolumn_1_sva_1 = Kcolumn_1_reg + 2'b1;
  assign Kcolumn_1_sva_1 = xKcolumn_1_sva_1[1:0];
  assign for_for_for_for_mux_8_nl = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_2_sva[0])
      , Result_1_sva_dfm_mx0}, for_for_for_for_lor_7_lpi_3_dfm);
  assign Result_1_sva_mx1 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[0])
      , (for_for_for_for_mux_8_nl)}, for_for_for_for_lor_lpi_3_dfm);
  assign for_for_for_for_and_1_cse = for_for_for_for_lor_7_lpi_3_dfm & for_for_for_for_lor_lpi_3_dfm;
  assign for_for_for_for_and_cse = (~ for_for_for_for_lor_7_lpi_3_dfm) & for_for_for_for_lor_lpi_3_dfm;
  assign Result_sg1_sva_dfm_2 = MUX1HOT_v_6_3_2({(for_for_for_for_else_ac_fixed_cctor_sva[6:1])
      , (for_for_for_for_else_ac_fixed_cctor_2_sva[6:1]) , Result_sg1_sva_dfm_mx0},
      {(~ for_for_for_for_lor_lpi_3_dfm) , for_for_for_for_and_cse , for_for_for_for_and_1_cse});
  assign Result_sg2_sva_mx1 = MUX1HOT_s_1_3_2({Result_sg2_sva_dfm_mx0 , (for_for_for_for_else_ac_fixed_cctor_2_sva[7])
      , (for_for_for_for_else_ac_fixed_cctor_sva[7])}, {for_for_for_for_and_1_cse
      , for_for_for_for_and_cse , (~ for_for_for_for_lor_lpi_3_dfm)});
  assign xfor_for_for_for_1_acc_3_tmp = conv_u2s_9_10(Drow_1_sva_2) + 10'b1111111111;
  assign for_for_for_for_1_acc_3_tmp = xfor_for_for_for_1_acc_3_tmp[9:0];
  assign for_for_for_for_else_and_1_cse = (for_for_for_for_acc_7_cse[0]) & (~ (for_for_for_for_acc_7_cse[1]));
  assign for_for_for_for_else_and_2_cse = (for_for_for_for_acc_7_cse[1]) & (for_for_for_for_acc_7_cse[0]);
  assign for_for_for_for_else_nor_1_cse = ~((for_for_for_for_acc_7_cse[1]) | (for_for_for_for_acc_7_cse[0]));
  assign xfor_for_for_for_acc_7_cse = Kcolumn_1_reg + 2'b11;
  assign for_for_for_for_acc_7_cse = xfor_for_for_for_acc_7_cse[1:0];
  assign xfor_for_for_for_3_acc_3_tmp = conv_u2u_9_10(Drow_1_sva_2) + 10'b1;
  assign for_for_for_for_3_acc_3_tmp = xfor_for_for_for_3_acc_3_tmp[9:0];
  assign for_for_for_for_lor_7_lpi_3_dfm_mx0w0 = (z_out[9]) | (z_out[10]);
  assign Result_1_sva_dfm_mx0 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_1_sva[0])
      , Result_1_sva}, for_for_for_for_lor_5_lpi_3_dfm_st);
  assign Result_sg1_sva_dfm_mx0 = MUX_v_6_2_2({(for_for_for_for_else_ac_fixed_cctor_1_sva[6:1])
      , Result_sg1_sva}, for_for_for_for_lor_5_lpi_3_dfm_st);
  assign Result_sg2_sva_dfm_mx0 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_1_sva[7])
      , Result_sg2_sva}, for_for_for_for_lor_5_lpi_3_dfm_st);
  assign for_for_for_for_else_ac_fixed_cctor_1_sva = (slc_sat_1_sva[7:0]) | (signext_8_1(slc_sat_1_sva[8]));
  assign xslc_sat_1_sva = conv_u2u_8_9({Result_sg2_sva , Result_sg1_sva , Result_1_sva})
      + conv_u2u_5_9(z_out_1[8:4]);
  assign slc_sat_1_sva = xslc_sat_1_sva[8:0];
  assign for_for_for_for_else_ac_fixed_cctor_2_sva = (slc_sat_2_sva[7:0]) | (signext_8_1(slc_sat_2_sva[8]));
  assign xslc_sat_2_sva = conv_u2u_8_9({Result_sg2_sva_dfm_mx0 , Result_sg1_sva_dfm_mx0
      , Result_1_sva_dfm_mx0}) + conv_u2u_5_9(for_for_for_for_2_else_slc_for_for_for_for_else_mul_1_sdt_itm);
  assign slc_sat_2_sva = xslc_sat_2_sva[8:0];
  assign for_for_for_for_else_ac_fixed_cctor_sva = (slc_sat_sva[7:0]) | (signext_8_1(slc_sat_sva[8]));
  assign xslc_sat_sva = conv_u2u_8_9(for_for_for_for_else_ac_fixed_cctor_2_sva) +
      conv_u2u_5_9(for_for_for_for_3_else_slc_for_for_for_for_else_mul_1_sdt_itm);
  assign slc_sat_sva = xslc_sat_sva[8:0];
  assign or_dcpl_16 = (fsm_output[3]) | (fsm_output[2]);
  assign or_dcpl_18 = (fsm_output[0]) | (fsm_output[6]);
  assign or_19_cse = or_dcpl_18 | (fsm_output[5]);
  assign and_dcpl_11 = ~((fsm_output[0]) | (fsm_output[6]));
  assign mux1h_7_nl = MUX1HOT_v_9_3_2({((for_for_for_for_3_acc_3_tmp[8:0]) + conv_s2u_2_9(z_out[10:9]))
      , for_for_for_for_acc_itm , for_for_for_for_1_else_acc_itm}, {(fsm_output[1])
      , (fsm_output[2]) , (fsm_output[3])});
  assign mux_27_nl = MUX_v_9_2_2({(z_out[8:0]) , for_for_for_for_1_else_slc_conv1_2_itm},
      (fsm_output[2]) | (fsm_output[3]));
  assign in_rsc_singleport_addr = {(mux1h_7_nl) , (mux_27_nl)};
  assign in_rsc_singleport_re = ~(((fsm_output[1]) & (~ (z_out[9])) & (~((for_for_for_for_3_acc_3_tmp[9])
      | (z_out[10])))) | ((fsm_output[3]) & (~ for_for_for_for_lor_5_lpi_3_dfm_st))
      | ((~ for_for_for_for_lor_7_lpi_3_dfm) & (fsm_output[2])));
  assign out_rsc_singleport_data_in = {Result_sg2_sva_mx1 , Result_sg1_sva_dfm_2
      , Result_1_sva_mx1};
  assign out_rsc_singleport_addr = {Drow_1_sva_2 , Dcolumn_1_sva_2};
  assign out_rsc_singleport_we = ~((fsm_output[4]) & (~ for_for_for_slc_itm));
  always @(posedge clk) begin
    if ( rst ) begin
      Kcolumn_1_reg <= 2'b0;
      Drow_1_sva_2 <= 9'b0;
      Result_1_sva <= 1'b0;
      Result_sg1_sva <= 6'b0;
      Result_sg2_sva <= 1'b0;
      Dcolumn_1_sva_2 <= 9'b0;
      for_for_for_for_else_mux_itm <= 2'b0;
      for_for_for_for_1_else_slc_conv1_2_itm <= 9'b0;
      for_for_for_for_1_else_acc_itm <= 9'b0;
      for_for_for_for_else_or_1_itm <= 1'b0;
      for_for_for_for_else_or_itm <= 1'b0;
      for_for_for_for_acc_itm <= 9'b0;
      for_for_for_for_else_mux_1_itm <= 2'b0;
      for_for_for_for_lor_7_lpi_3_dfm <= 1'b0;
      for_for_for_slc_itm <= 1'b0;
      for_for_for_for_lor_lpi_3_dfm <= 1'b0;
      for_for_for_for_lor_5_lpi_3_dfm_st <= 1'b0;
      for_for_for_for_3_else_slc_for_for_for_for_else_mul_1_sdt_itm <= 5'b0;
      for_for_for_for_2_else_slc_for_for_for_for_else_mul_1_sdt_itm <= 5'b0;
    end
    else begin
      Kcolumn_1_reg <= (MUX_v_2_2_2({Kcolumn_1_sva_1 , Kcolumn_1_reg}, or_dcpl_16
          | (fsm_output[4]))) & (signext_2_1(~ or_19_cse));
      Drow_1_sva_2 <= (MUX_v_9_2_2({(for_for_for_for_3_acc_3_tmp[8:0]) , Drow_1_sva_2},
          and_dcpl_11 & (~ (fsm_output[5])))) & (signext_9_1(~ or_dcpl_18));
      Result_1_sva <= (MUX_s_1_2_2({Result_1_sva , Result_1_sva_mx1}, fsm_output[4]))
          & (~ or_19_cse);
      Result_sg1_sva <= (MUX_v_6_2_2({Result_sg1_sva , Result_sg1_sva_dfm_2}, fsm_output[4]))
          & (signext_6_1(~ or_19_cse));
      Result_sg2_sva <= (MUX_s_1_2_2({Result_sg2_sva , Result_sg2_sva_mx1}, fsm_output[4]))
          & (~ or_19_cse);
      Dcolumn_1_sva_2 <= (MUX_v_9_2_2({(z_out[8:0]) , Dcolumn_1_sva_2}, and_dcpl_11))
          & (signext_9_1(~ (fsm_output[0])));
      for_for_for_for_else_mux_itm <= MUX1HOT_v_2_3_2({2'b1 , 2'b10 , for_for_for_for_else_mux_itm},
          {((~((Kcolumn_1_reg[1]) | (Kcolumn_1_reg[0]) | or_dcpl_16)) | ((Kcolumn_1_reg[1])
          & (~ (Kcolumn_1_reg[0])) & (~ or_dcpl_16))) , ((Kcolumn_1_reg[0]) & (~
          (Kcolumn_1_reg[1])) & (~ or_dcpl_16)) , or_dcpl_16});
      for_for_for_for_1_else_slc_conv1_2_itm <= MUX_v_9_2_2({(z_out[8:0]) , for_for_for_for_1_else_slc_conv1_2_itm},
          fsm_output[2]);
      for_for_for_for_1_else_acc_itm <= MUX_v_9_2_2({((for_for_for_for_1_acc_3_tmp[8:0])
          + conv_s2u_2_9(z_out[10:9])) , for_for_for_for_1_else_acc_itm}, fsm_output[2]);
      for_for_for_for_else_or_1_itm <= MUX_s_1_2_2({((~(for_for_for_for_else_and_1_cse
          | for_for_for_for_else_and_2_cse)) | for_for_for_for_else_nor_1_cse) ,
          for_for_for_for_else_or_1_itm}, fsm_output[2]);
      for_for_for_for_else_or_itm <= MUX_s_1_2_2({((~ for_for_for_for_else_nor_1_cse)
          | for_for_for_for_else_and_1_cse | for_for_for_for_else_and_2_cse) , for_for_for_for_else_or_itm},
          fsm_output[2]);
      for_for_for_for_acc_itm <= conv_s2u_2_9(z_out[10:9]) + Drow_1_sva_2;
      for_for_for_for_else_mux_1_itm <= MUX_v_2_4_2({2'b1 , 2'b0 , 2'b1 , 2'b10},
          {(~ (Kcolumn_1_reg[1])) , (Kcolumn_1_reg[0])});
      for_for_for_for_lor_7_lpi_3_dfm <= MUX_s_1_2_2({for_for_for_for_lor_7_lpi_3_dfm
          , for_for_for_for_lor_7_lpi_3_dfm_mx0w0}, fsm_output[1]);
      for_for_for_slc_itm <= MUX_s_1_2_2({for_for_for_slc_itm , (readslicef_2_1_1((Kcolumn_1_sva_1
          + 2'b1)))}, fsm_output[1]);
      for_for_for_for_lor_lpi_3_dfm <= MUX_s_1_2_2({for_for_for_for_lor_lpi_3_dfm
          , ((for_for_for_for_3_acc_3_tmp[9]) | for_for_for_for_lor_7_lpi_3_dfm_mx0w0)},
          fsm_output[1]);
      for_for_for_for_lor_5_lpi_3_dfm_st <= MUX_s_1_2_2({for_for_for_for_lor_5_lpi_3_dfm_st
          , ((for_for_for_for_1_acc_3_tmp[9]) | for_for_for_for_lor_7_lpi_3_dfm_mx0w0)},
          fsm_output[1]);
      for_for_for_for_3_else_slc_for_for_for_for_else_mul_1_sdt_itm <= MUX_v_5_2_2({(z_out_1[8:4])
          , for_for_for_for_3_else_slc_for_for_for_for_else_mul_1_sdt_itm}, fsm_output[3]);
      for_for_for_for_2_else_slc_for_for_for_for_else_mul_1_sdt_itm <= z_out_1[11:7];
    end
  end
  assign mux_20_nl = MUX_v_2_2_2({for_for_for_for_acc_7_cse , 2'b1}, fsm_output[6]);
  assign xz_out = conv_u2u_9_11(Dcolumn_1_sva_2) + conv_s2u_2_11(mux_20_nl);
  assign z_out = xz_out[10:0];
  assign mux1h_42_nl = MUX1HOT_v_2_3_2({for_for_for_for_else_mux_1_itm , ({{1{for_for_for_for_else_or_1_itm}},
      for_for_for_for_else_or_1_itm}) , for_for_for_for_else_mux_itm}, {(fsm_output[2])
      , (fsm_output[3]) , (fsm_output[4])});
  assign xz_out_1 = conv_u2u_5_12({(for_for_for_for_else_or_itm & (~((fsm_output[2])
      | (fsm_output[4])))) , 2'b0 , (mux1h_42_nl)}) * conv_u2u_8_12(in_rsc_singleport_data_out);
  assign z_out_1 = xz_out_1[11:0];

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [5:0] MUX1HOT_v_6_3_2;
    input [17:0] inputs;
    input [2:0] sel;
    reg [5:0] result;
    integer i;
  begin
    result = inputs[0+:6] & {6{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*6+:6] & {6{sel[i]}});
    MUX1HOT_v_6_3_2 = result;
  end
  endfunction


  function [0:0] MUX1HOT_s_1_3_2;
    input [2:0] inputs;
    input [2:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [8:0] MUX1HOT_v_9_3_2;
    input [26:0] inputs;
    input [2:0] sel;
    reg [8:0] result;
    integer i;
  begin
    result = inputs[0+:9] & {9{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*9+:9] & {9{sel[i]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function [8:0] MUX_v_9_2_2;
    input [17:0] inputs;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[17:9];
      end
      1'b1 : begin
        result = inputs[8:0];
      end
      default : begin
        result = inputs[17:9];
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [8:0] signext_9_1;
    input [0:0] vector;
  begin
    signext_9_1= {{8{vector[0]}}, vector};
  end
  endfunction


  function [5:0] signext_6_1;
    input [0:0] vector;
  begin
    signext_6_1= {{5{vector[0]}}, vector};
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_4_2;
    input [7:0] inputs;
    input [1:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[7:6];
      end
      2'b01 : begin
        result = inputs[5:4];
      end
      2'b10 : begin
        result = inputs[3:2];
      end
      2'b11 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[7:6];
      end
    endcase
    MUX_v_2_4_2 = result;
  end
  endfunction


  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function [4:0] MUX_v_5_2_2;
    input [9:0] inputs;
    input [0:0] sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[9:5];
      end
      1'b1 : begin
        result = inputs[4:0];
      end
      default : begin
        result = inputs[9:5];
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function signed [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_5_9 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_9 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_s2u_2_9 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function  [10:0] conv_u2u_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [10:0] conv_s2u_2_11 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_11 = {{9{vector[1]}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_5_12 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_12 = {{7{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_8_12 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_12 = {{4{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion
//  Generated from file(s):
//    2) $PROJECT_HOME/ESL_CA2.c
// ------------------------------------------------------------------


module Convolotion (
  clk, rst, in_rsc_singleport_data_in, in_rsc_singleport_addr, in_rsc_singleport_re,
      in_rsc_singleport_we, in_rsc_singleport_data_out, out_rsc_singleport_data_in,
      out_rsc_singleport_addr, out_rsc_singleport_re, out_rsc_singleport_we, out_rsc_singleport_data_out
);
  input clk;
  input rst;
  output [7:0] in_rsc_singleport_data_in;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  output in_rsc_singleport_we;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_re;
  output out_rsc_singleport_we;
  input [7:0] out_rsc_singleport_data_out;


  // Interconnect Declarations
  wire [17:0] in_rsc_singleport_addr_reg;
  wire in_rsc_singleport_re_reg;
  wire [7:0] out_rsc_singleport_data_in_reg;
  wire [17:0] out_rsc_singleport_addr_reg;
  wire out_rsc_singleport_we_reg;

  Convolotion_core Convolotion_core_inst (
      .clk(clk),
      .rst(rst),
      .in_rsc_singleport_addr(in_rsc_singleport_addr_reg),
      .in_rsc_singleport_re(in_rsc_singleport_re_reg),
      .in_rsc_singleport_data_out(in_rsc_singleport_data_out),
      .out_rsc_singleport_data_in(out_rsc_singleport_data_in_reg),
      .out_rsc_singleport_addr(out_rsc_singleport_addr_reg),
      .out_rsc_singleport_we(out_rsc_singleport_we_reg)
    );
  assign in_rsc_singleport_data_in = 8'b0;
  assign in_rsc_singleport_addr = in_rsc_singleport_addr_reg;
  assign in_rsc_singleport_re = in_rsc_singleport_re_reg;
  assign in_rsc_singleport_we = 1'b1;
  assign out_rsc_singleport_data_in = out_rsc_singleport_data_in_reg;
  assign out_rsc_singleport_addr = out_rsc_singleport_addr_reg;
  assign out_rsc_singleport_re = 1'b1;
  assign out_rsc_singleport_we = out_rsc_singleport_we_reg;
endmodule



