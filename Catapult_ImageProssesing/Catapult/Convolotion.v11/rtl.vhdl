-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2011a.41 Production Release
--  HLS Date:       Thu Apr  7 20:28:55 PDT 2011
-- 
--  Generated by:   ss@DESKTOP-UB05SU4
--  Generated date: Sat Apr 20 18:39:32 2019
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    Convolotion_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.std_logic_arith.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.convolotion_mux_pkg.ALL;


ENTITY Convolotion_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (18 DOWNTO 0);
    st_for_1_for_for_for_1_tr0 : IN STD_LOGIC;
    st_for_1_for_for_tr0 : IN STD_LOGIC;
    st_for_1_for_1_tr0 : IN STD_LOGIC;
    st_for_2_for_for_tr0 : IN STD_LOGIC;
    st_for_2_for_1_tr0 : IN STD_LOGIC;
    st_for_1_tr0 : IN STD_LOGIC;
    st_for_3_for_for_tr0 : IN STD_LOGIC;
    st_for_3_for_1_tr0 : IN STD_LOGIC
  );
END Convolotion_core_fsm;

ARCHITECTURE v11 OF Convolotion_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for Convolotion_core_fsm_1
  TYPE Convolotion_core_fsm_1_ST IS (st_main, st_for_1_for_for_for, st_for_1_for_for_for_1,
      st_for_1_for_for, st_for_1_for, st_for_1_for_1, st_for, st_for_2_for_for_for,
      st_for_2_for_for_for_1, st_for_2_for_for, st_for_2_for, st_for_2_for_1, st_for_1,
      st_for_3_for_for_for, st_for_3_for_for_for_1, st_for_3_for_for, st_for_3_for,
      st_for_3_for_1, st_for_2);

  SIGNAL state_var : Convolotion_core_fsm_1_ST;
  SIGNAL state_var_NS : Convolotion_core_fsm_1_ST;

BEGIN
  -- Default Constant Signal Assignments

  Convolotion_core_fsm_1 : PROCESS (st_for_1_for_for_for_1_tr0, st_for_1_for_for_tr0,
      st_for_1_for_1_tr0, st_for_2_for_for_tr0, st_for_2_for_1_tr0, st_for_1_tr0,
      st_for_3_for_for_tr0, st_for_3_for_1_tr0, state_var)
  BEGIN
    CASE state_var IS
      WHEN st_main =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000000000001");
        state_var_NS <= st_for_1_for_for_for;
      WHEN st_for_1_for_for_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000000000010");
        state_var_NS <= st_for_1_for_for_for_1;
      WHEN st_for_1_for_for_for_1 =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000000000100");
        IF ( st_for_1_for_for_for_1_tr0 = '1' ) THEN
          state_var_NS <= st_for_1_for_for;
        ELSE
          state_var_NS <= st_for_1_for_for_for;
        END IF;
      WHEN st_for_1_for_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000000001000");
        IF ( st_for_1_for_for_tr0 = '1' ) THEN
          state_var_NS <= st_for_1_for;
        ELSE
          state_var_NS <= st_for_1_for_for_for;
        END IF;
      WHEN st_for_1_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000000010000");
        state_var_NS <= st_for_1_for_1;
      WHEN st_for_1_for_1 =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000000100000");
        IF ( st_for_1_for_1_tr0 = '1' ) THEN
          state_var_NS <= st_for;
        ELSE
          state_var_NS <= st_for_1_for_for_for;
        END IF;
      WHEN st_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000001000000");
        state_var_NS <= st_for_2_for_for_for;
      WHEN st_for_2_for_for_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000010000000");
        state_var_NS <= st_for_2_for_for_for_1;
      WHEN st_for_2_for_for_for_1 =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000000100000000");
        IF ( st_for_1_for_for_for_1_tr0 = '1' ) THEN
          state_var_NS <= st_for_2_for_for;
        ELSE
          state_var_NS <= st_for_2_for_for_for;
        END IF;
      WHEN st_for_2_for_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000001000000000");
        IF ( st_for_2_for_for_tr0 = '1' ) THEN
          state_var_NS <= st_for_2_for;
        ELSE
          state_var_NS <= st_for_2_for_for_for;
        END IF;
      WHEN st_for_2_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000010000000000");
        state_var_NS <= st_for_2_for_1;
      WHEN st_for_2_for_1 =>
        fsm_output <= STD_LOGIC_VECTOR'("0000000100000000000");
        IF ( st_for_2_for_1_tr0 = '1' ) THEN
          state_var_NS <= st_for_1;
        ELSE
          state_var_NS <= st_for_2_for_for_for;
        END IF;
      WHEN st_for_1 =>
        fsm_output <= STD_LOGIC_VECTOR'("0000001000000000000");
        IF ( st_for_1_tr0 = '1' ) THEN
          state_var_NS <= st_main;
        ELSE
          state_var_NS <= st_for_3_for_for_for;
        END IF;
      WHEN st_for_3_for_for_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0000010000000000000");
        state_var_NS <= st_for_3_for_for_for_1;
      WHEN st_for_3_for_for_for_1 =>
        fsm_output <= STD_LOGIC_VECTOR'("0000100000000000000");
        IF ( st_for_1_for_for_for_1_tr0 = '1' ) THEN
          state_var_NS <= st_for_3_for_for;
        ELSE
          state_var_NS <= st_for_3_for_for_for;
        END IF;
      WHEN st_for_3_for_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0001000000000000000");
        IF ( st_for_3_for_for_tr0 = '1' ) THEN
          state_var_NS <= st_for_3_for;
        ELSE
          state_var_NS <= st_for_3_for_for_for;
        END IF;
      WHEN st_for_3_for =>
        fsm_output <= STD_LOGIC_VECTOR'("0010000000000000000");
        state_var_NS <= st_for_3_for_1;
      WHEN st_for_3_for_1 =>
        fsm_output <= STD_LOGIC_VECTOR'("0100000000000000000");
        IF ( st_for_3_for_1_tr0 = '1' ) THEN
          state_var_NS <= st_for_2;
        ELSE
          state_var_NS <= st_for_3_for_for_for;
        END IF;
      WHEN st_for_2 =>
        fsm_output <= STD_LOGIC_VECTOR'("1000000000000000000");
        state_var_NS <= st_for_1_for_for_for;
      WHEN OTHERS =>
        fsm_output <= "0000000000000000000";
        state_var_NS <= st_main;
    END CASE;
  END PROCESS Convolotion_core_fsm_1;

  Convolotion_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= st_main;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS Convolotion_core_fsm_1_REG;

END v11;

-- ------------------------------------------------------------------
--  Design Unit:    Convolotion_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.std_logic_arith.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.convolotion_mux_pkg.ALL;


ENTITY Convolotion_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    in_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
    in_rsc_singleport_re : OUT STD_LOGIC;
    in_rsc_singleport_data_out : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    out_rsc_singleport_data_in : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    out_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
    out_rsc_singleport_we : OUT STD_LOGIC
  );
END Convolotion_core;

ARCHITECTURE v11 OF Convolotion_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL fsm_output : STD_LOGIC_VECTOR (18 DOWNTO 0);
  SIGNAL or_dcpl_30 : STD_LOGIC;
  SIGNAL and_dcpl_7 : STD_LOGIC;
  SIGNAL and_dcpl_8 : STD_LOGIC;
  SIGNAL and_dcpl_11 : STD_LOGIC;
  SIGNAL reg_3 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL Result_reg_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL Result_reg : STD_LOGIC;
  SIGNAL reg_5 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL reg_6 : STD_LOGIC;
  SIGNAL reg_4 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL reg_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL for_for_for_for_reg : STD_LOGIC;
  SIGNAL for_for_for_for_else_reg_1 : STD_LOGIC;
  SIGNAL reg_7 : STD_LOGIC;
  SIGNAL for_for_for_for_else_reg : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL reg_2 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL or_48_cse : STD_LOGIC;
  SIGNAL for_1_for_for_for_oelse_2_acc_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL or_32_cse : STD_LOGIC;
  SIGNAL and_15_cse : STD_LOGIC;
  SIGNAL reg_Dcolumn_1_sva_tmp_1 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL z_out : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL for_for_for_for_else_acc_sdt : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL for_for_for_for_else_ac_fixed_cctor_1_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL slc_sat_1_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_for_for_for_else_acc_itm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL or_cse : STD_LOGIC;

  SIGNAL mux_24_nl : STD_LOGIC;
  SIGNAL mux_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mux_8_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL mux_22_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mux_23_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL mux_7_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  COMPONENT Convolotion_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (18 DOWNTO 0);
      st_for_1_for_for_for_1_tr0 : IN STD_LOGIC;
      st_for_1_for_for_tr0 : IN STD_LOGIC;
      st_for_1_for_1_tr0 : IN STD_LOGIC;
      st_for_2_for_for_tr0 : IN STD_LOGIC;
      st_for_2_for_1_tr0 : IN STD_LOGIC;
      st_for_1_tr0 : IN STD_LOGIC;
      st_for_3_for_for_tr0 : IN STD_LOGIC;
      st_for_3_for_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL Convolotion_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (18 DOWNTO 0);
  SIGNAL Convolotion_core_fsm_inst_st_for_1_for_for_for_1_tr0 : STD_LOGIC;
  SIGNAL Convolotion_core_fsm_inst_st_for_1_for_for_tr0 : STD_LOGIC;
  SIGNAL Convolotion_core_fsm_inst_st_for_1_for_1_tr0 : STD_LOGIC;
  SIGNAL Convolotion_core_fsm_inst_st_for_2_for_for_tr0 : STD_LOGIC;
  SIGNAL Convolotion_core_fsm_inst_st_for_2_for_1_tr0 : STD_LOGIC;
  SIGNAL Convolotion_core_fsm_inst_st_for_1_tr0 : STD_LOGIC;
  SIGNAL Convolotion_core_fsm_inst_st_for_3_for_for_tr0 : STD_LOGIC;
  SIGNAL Convolotion_core_fsm_inst_st_for_3_for_1_tr0 : STD_LOGIC;

BEGIN
  -- Default Constant Signal Assignments

  Convolotion_core_fsm_inst : convolotion_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => Convolotion_core_fsm_inst_fsm_output,
      st_for_1_for_for_for_1_tr0 => Convolotion_core_fsm_inst_st_for_1_for_for_for_1_tr0,
      st_for_1_for_for_tr0 => Convolotion_core_fsm_inst_st_for_1_for_for_tr0,
      st_for_1_for_1_tr0 => Convolotion_core_fsm_inst_st_for_1_for_1_tr0,
      st_for_2_for_for_tr0 => Convolotion_core_fsm_inst_st_for_2_for_for_tr0,
      st_for_2_for_1_tr0 => Convolotion_core_fsm_inst_st_for_2_for_1_tr0,
      st_for_1_tr0 => Convolotion_core_fsm_inst_st_for_1_tr0,
      st_for_3_for_for_tr0 => Convolotion_core_fsm_inst_st_for_3_for_for_tr0,
      st_for_3_for_1_tr0 => Convolotion_core_fsm_inst_st_for_3_for_1_tr0
    );
  fsm_output <= Convolotion_core_fsm_inst_fsm_output;
  Convolotion_core_fsm_inst_st_for_1_for_for_for_1_tr0 <= NOT reg_7;
  Convolotion_core_fsm_inst_st_for_1_for_for_tr0 <= NOT (z_out_1(2));
  Convolotion_core_fsm_inst_st_for_1_for_1_tr0 <= reg_1(9);
  Convolotion_core_fsm_inst_st_for_2_for_for_tr0 <= NOT (z_out_1(2));
  Convolotion_core_fsm_inst_st_for_2_for_1_tr0 <= reg_1(9);
  Convolotion_core_fsm_inst_st_for_1_tr0 <= z_out_2(9);
  Convolotion_core_fsm_inst_st_for_3_for_for_tr0 <= NOT (z_out_1(2));
  Convolotion_core_fsm_inst_st_for_3_for_1_tr0 <= reg_1(9);

  or_32_cse <= or_dcpl_30 OR (fsm_output(18)) OR (fsm_output(17)) OR (fsm_output(11))
      OR (fsm_output(5)) OR (fsm_output(12));
  and_15_cse <= ((NOT((fsm_output(14)) OR (fsm_output(2)) OR (fsm_output(8)))) OR
      for_for_for_for_reg) AND and_dcpl_11 AND and_dcpl_8 AND (NOT (fsm_output(11)))
      AND and_dcpl_7;
  for_for_for_for_else_acc_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(reg_4),
      3) + CONV_UNSIGNED(UNSIGNED(reg_5), 3), 3));
  for_for_for_for_else_acc_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_for_for_for_else_acc_sdt(2
      DOWNTO 1)), 3) + CONV_UNSIGNED(UNSIGNED(reg_4), 3), 3));
  for_1_for_for_for_oelse_2_acc_2 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(NOT (z_out_4(10
      DOWNTO 9))) + CONV_SIGNED(CONV_UNSIGNED('1', 1), 2), 2));
  for_for_for_for_else_ac_fixed_cctor_1_sva <= (slc_sat_1_sva(7 DOWNTO 0)) OR STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(slc_sat_1_sva(8),
      1),8));
  slc_sat_1_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR(Result_reg)
      & Result_reg_1 & TO_STDLOGICVECTOR(reg_6)), 9) + CONV_UNSIGNED(UNSIGNED(readslice(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(UNSIGNED(in_rsc_singleport_data_out)
      * UNSIGNED(for_for_for_for_else_reg & TO_STDLOGICVECTOR('0') & STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(for_for_for_for_else_reg_1,
      1),2)))), 12)), 7, 5)), 9), 9));
  or_dcpl_30 <= (fsm_output(6)) OR (fsm_output(0));
  and_dcpl_7 <= NOT((fsm_output(5)) OR (fsm_output(12)));
  and_dcpl_8 <= NOT((fsm_output(18)) OR (fsm_output(17)));
  and_dcpl_11 <= NOT((fsm_output(6)) OR (fsm_output(0)));
  or_48_cse <= or_dcpl_30 OR (fsm_output(18));
  mux_24_nl <= MUX_s_1_2_2(STD_LOGIC_VECTOR'((z_out_2(9)) & (z_out_2(10))), fsm_output(13));
  in_rsc_singleport_addr <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_4(8 DOWNTO
      0)) + CONV_UNSIGNED(SIGNED'(((mux_24_nl) AND (NOT (fsm_output(7)))) & (z_out_2(9))),
      9), 9)) & (z_out_2(8 DOWNTO 0));
  in_rsc_singleport_re <= NOT((((NOT((z_out_2(9)) OR (z_out_2(10)))) AND (fsm_output(13)))
      OR ((fsm_output(1)) AND (NOT (z_out_2(9)))) OR ((fsm_output(7)) AND (NOT (z_out_2(9)))))
      AND (NOT((z_out_4(10)) OR (for_1_for_for_for_oelse_2_acc_2(1)))));
  out_rsc_singleport_data_in <= TO_STDLOGICVECTOR(Result_reg) & Result_reg_1 & TO_STDLOGICVECTOR(reg_6);
  mux_nl <= MUX_v_9_2_2(reg_3 & reg_Dcolumn_1_sva_tmp_1, fsm_output(16));
  out_rsc_singleport_addr <= reg_2 & (mux_nl);
  out_rsc_singleport_we <= NOT((fsm_output(10)) OR (fsm_output(16)) OR (fsm_output(4)));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        Result_reg_1 <= STD_LOGIC_VECTOR'("000000");
        Result_reg <= '0';
        reg_3 <= STD_LOGIC_VECTOR'("000000000");
        reg_2 <= STD_LOGIC_VECTOR'("000000000");
        reg_4 <= STD_LOGIC_VECTOR'("00");
        reg_5 <= STD_LOGIC_VECTOR'("00");
        reg_6 <= '0';
        for_for_for_for_else_reg_1 <= '0';
        reg_7 <= '0';
        for_for_for_for_reg <= '0';
        for_for_for_for_else_reg <= STD_LOGIC_VECTOR'("00");
        reg_1 <= STD_LOGIC_VECTOR'("0000000000");
        reg_Dcolumn_1_sva_tmp_1 <= STD_LOGIC_VECTOR'("000000000");
      ELSE
        Result_reg_1 <= (MUX_v_6_2_2((for_for_for_for_else_ac_fixed_cctor_1_sva(6
            DOWNTO 1)) & Result_reg_1, and_15_cse)) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            or_32_cse, 1),6));
        Result_reg <= (MUX_s_1_2_2(STD_LOGIC_VECTOR'((for_for_for_for_else_ac_fixed_cctor_1_sva(7))
            & Result_reg), and_15_cse)) AND (NOT or_32_cse);
        reg_3 <= (MUX_v_9_2_2(reg_3 & (z_out_2(8 DOWNTO 0)), NOT((NOT((fsm_output(18))
            OR (fsm_output(6)))) OR (fsm_output(0))))) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            (fsm_output(0)), 1),9));
        reg_2 <= (MUX_v_9_2_2((reg_1(8 DOWNTO 0)) & reg_2, and_dcpl_11 AND and_dcpl_8
            AND (NOT((fsm_output(11)) OR (fsm_output(5)) OR (fsm_output(12))))))
            AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT (fsm_output(12)), 1),9))
            AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT or_48_cse, 1),9));
        reg_4 <= (MUX_v_2_2_2(z_out & reg_4, (fsm_output(14)) OR (fsm_output(2))
            OR (fsm_output(8)))) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT(or_48_cse
            OR (fsm_output(17)) OR (fsm_output(11)) OR (fsm_output(5)) OR (fsm_output(12))
            OR (fsm_output(15)) OR (fsm_output(9)) OR (fsm_output(3))), 1),2));
        reg_5 <= (MUX_v_2_2_2(z_out & reg_5, and_dcpl_11 AND (NOT (fsm_output(18)))
            AND (NOT((fsm_output(17)) OR (fsm_output(11)))) AND and_dcpl_7 AND (NOT
            (fsm_output(15))) AND (NOT((fsm_output(9)) OR (fsm_output(3)))))) AND
            STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT or_32_cse, 1),2));
        reg_6 <= (MUX_s_1_2_2(STD_LOGIC_VECTOR'((for_for_for_for_else_ac_fixed_cctor_1_sva(0))
            & reg_6), and_15_cse)) AND (NOT or_32_cse);
        for_for_for_for_else_reg_1 <= MUX_s_1_16_2(STD_LOGIC_VECTOR'('0' & '0' &
            '0' & '0' & '1' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'
            & '0' & '0'), for_for_for_for_else_acc_itm & TO_STDLOGICVECTOR(for_for_for_for_else_acc_sdt(0)));
        reg_7 <= z_out_1(2);
        for_for_for_for_reg <= MUX_s_1_2_2(STD_LOGIC_VECTOR'(((for_1_for_for_for_oelse_2_acc_2(1))
            OR (z_out_4(10)) OR (z_out_2(9))) & ((for_1_for_for_for_oelse_2_acc_2(1))
            OR (z_out_4(10)) OR (z_out_2(9)) OR (z_out_2(10)))), fsm_output(13));
        for_for_for_for_else_reg <= MUX_v_2_16_2(STD_LOGIC_VECTOR'("01") & STD_LOGIC_VECTOR'("10")
            & STD_LOGIC_VECTOR'("01") & STD_LOGIC_VECTOR'("10") & STD_LOGIC_VECTOR'("00")
            & STD_LOGIC_VECTOR'("10") & STD_LOGIC_VECTOR'("01") & STD_LOGIC_VECTOR'("10")
            & STD_LOGIC_VECTOR'("01") & STD_LOGIC_VECTOR'("00") & STD_LOGIC_VECTOR'("00")
            & STD_LOGIC_VECTOR'("00") & STD_LOGIC_VECTOR'("00") & STD_LOGIC_VECTOR'("00")
            & STD_LOGIC_VECTOR'("00") & STD_LOGIC_VECTOR'("00"), for_for_for_for_else_acc_itm
            & TO_STDLOGICVECTOR(for_for_for_for_else_acc_sdt(0)));
        reg_1 <= z_out_4(9 DOWNTO 0);
        reg_Dcolumn_1_sva_tmp_1 <= MUX_v_9_2_2(reg_Dcolumn_1_sva_tmp_1 & (z_out_2(8
            DOWNTO 0)), fsm_output(12));
      END IF;
    END IF;
  END PROCESS;
  mux_8_nl <= MUX_v_2_2_2(reg_4 & reg_5, (fsm_output(3)) OR (fsm_output(9)) OR (fsm_output(15)));
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(mux_8_nl) + UNSIGNED'("01"), 2));
  z_out_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(TO_STDLOGICVECTOR('1')
      & z_out), 4) + UNSIGNED'("0001"), 4));
  or_cse <= (fsm_output(1)) OR (fsm_output(7)) OR (fsm_output(13));
  mux_22_nl <= MUX_v_9_2_2(reg_3 & reg_Dcolumn_1_sva_tmp_1, (fsm_output(18)) OR (fsm_output(13)));
  mux_23_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("01") & STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(reg_5)
      + CONV_SIGNED(CONV_SIGNED('1', 1), 2), 2)), or_cse);
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(mux_22_nl), 11)
      + CONV_UNSIGNED(SIGNED(mux_23_nl), 11), 11));
  mux_7_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("01") & STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(reg_4)
      + CONV_SIGNED(CONV_SIGNED('1', 1), 2), 2)), or_cse);
  z_out_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(reg_2), 11) +
      CONV_UNSIGNED(SIGNED(mux_7_nl), 11), 11));
END v11;

-- ------------------------------------------------------------------
--  Design Unit:    Convolotion
--  Generated from file(s):
--    2) $PROJECT_HOME/ESL_CA2.c
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.std_logic_arith.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.convolotion_mux_pkg.ALL;


ENTITY Convolotion IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    in_rsc_singleport_data_in : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    in_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
    in_rsc_singleport_re : OUT STD_LOGIC;
    in_rsc_singleport_we : OUT STD_LOGIC;
    in_rsc_singleport_data_out : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
    out_rsc_singleport_data_in : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    out_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
    out_rsc_singleport_re : OUT STD_LOGIC;
    out_rsc_singleport_we : OUT STD_LOGIC;
    out_rsc_singleport_data_out : IN STD_LOGIC_VECTOR (7 DOWNTO 0)
  );
END Convolotion;

ARCHITECTURE v11 OF Convolotion IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL in_rsc_singleport_addr_reg : STD_LOGIC_VECTOR (17 DOWNTO 0);
  SIGNAL in_rsc_singleport_re_reg : STD_LOGIC;
  SIGNAL out_rsc_singleport_data_in_reg : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL out_rsc_singleport_addr_reg : STD_LOGIC_VECTOR (17 DOWNTO 0);
  SIGNAL out_rsc_singleport_we_reg : STD_LOGIC;

  COMPONENT Convolotion_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      in_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
      in_rsc_singleport_re : OUT STD_LOGIC;
      in_rsc_singleport_data_out : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
      out_rsc_singleport_data_in : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
      out_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
      out_rsc_singleport_we : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL Convolotion_core_inst_in_rsc_singleport_addr : STD_LOGIC_VECTOR (17 DOWNTO
      0);
  SIGNAL Convolotion_core_inst_in_rsc_singleport_data_out : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL Convolotion_core_inst_out_rsc_singleport_data_in : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL Convolotion_core_inst_out_rsc_singleport_addr : STD_LOGIC_VECTOR (17 DOWNTO
      0);

BEGIN
  -- Default Constant Signal Assignments

  Convolotion_core_inst : convolotion_core
    PORT MAP(
      clk => clk,
      rst => rst,
      in_rsc_singleport_addr => Convolotion_core_inst_in_rsc_singleport_addr,
      in_rsc_singleport_re => in_rsc_singleport_re_reg,
      in_rsc_singleport_data_out => Convolotion_core_inst_in_rsc_singleport_data_out,
      out_rsc_singleport_data_in => Convolotion_core_inst_out_rsc_singleport_data_in,
      out_rsc_singleport_addr => Convolotion_core_inst_out_rsc_singleport_addr,
      out_rsc_singleport_we => out_rsc_singleport_we_reg
    );
  in_rsc_singleport_addr_reg <= Convolotion_core_inst_in_rsc_singleport_addr;
  Convolotion_core_inst_in_rsc_singleport_data_out <= in_rsc_singleport_data_out;
  out_rsc_singleport_data_in_reg <= Convolotion_core_inst_out_rsc_singleport_data_in;
  out_rsc_singleport_addr_reg <= Convolotion_core_inst_out_rsc_singleport_addr;

  in_rsc_singleport_data_in <= STD_LOGIC_VECTOR'("00000000");
  in_rsc_singleport_addr <= in_rsc_singleport_addr_reg;
  in_rsc_singleport_re <= in_rsc_singleport_re_reg;
  in_rsc_singleport_we <= '1';
  out_rsc_singleport_data_in <= out_rsc_singleport_data_in_reg;
  out_rsc_singleport_addr <= out_rsc_singleport_addr_reg;
  out_rsc_singleport_re <= '1';
  out_rsc_singleport_we <= out_rsc_singleport_we_reg;
END v11;



