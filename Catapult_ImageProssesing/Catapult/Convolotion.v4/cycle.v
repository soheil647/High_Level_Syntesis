// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.41 Production Release
//  HLS Date:       Thu Apr  7 20:28:55 PDT 2011
// 
//  Generated by:   ss@DESKTOP-UB05SU4
//  Generated date: Sat Apr 20 18:19:59 2019
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core
// ------------------------------------------------------------------


module Convolotion_core (
  clk, rst, in_rsc_singleport_addr, in_rsc_singleport_re, in_rsc_singleport_data_out,
      out_rsc_singleport_data_in, out_rsc_singleport_addr, out_rsc_singleport_we
);
  input clk;
  input rst;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_we;


  // Interconnect Declarations
  reg in_rsc_singleport_re_reg;
  reg out_rsc_singleport_we_reg;
  reg [8:0] in_rsc_singleport_addr_reg_sg1;
  reg [8:0] in_rsc_singleport_addr_reg_1;
  reg out_rsc_singleport_data_in_reg_sg2;
  reg [5:0] out_rsc_singleport_data_in_reg_sg1;
  reg out_rsc_singleport_data_in_reg_1;
  reg [8:0] out_rsc_singleport_addr_reg_sg1;
  reg [8:0] out_rsc_singleport_addr_reg_1;

  always begin : core
    // Interconnect Declarations
    reg exit_for_for_lpi;
    reg [5:0] Result_sg1_lpi;
    reg Result_1_lpi;
    reg Result_sg2_lpi;
    reg [1:0] Kcolumn_1_lpi;
    reg exit_for_for_for_lpi;
    reg [1:0] Krow_1_lpi;
    reg exit_for_1_lpi;
    reg Result_sg2_lpi_dfm;
    reg [5:0] Result_sg1_lpi_dfm;
    reg Result_1_lpi_dfm;
    reg [1:0] Krow_1_lpi_dfm;
    reg [1:0] Kcolumn_1_lpi_dfm;
    reg [10:0] conv1_sva;
    reg [10:0] conv2_sva;
    reg for_for_for_for_lor_1_lpi_dfm;
    reg for_for_for_for_lor_sva_1;
    reg for_for_for_for_lor_lpi_dfm;
    reg [8:0] slc_sat_sva;
    reg [7:0] for_for_for_for_else_ac_fixed_cctor_sva;
    reg Result_sg2_lpi_dfm_1;
    reg [5:0] Result_sg1_lpi_dfm_1;
    reg Result_1_lpi_dfm_1;
    reg [1:0] Krow_1_sva_1;
    reg exit_for_for_for_for_sva;
    reg [1:0] Kcolumn_1_sva_1;
    reg exit_for_for_for_sva_1;
    reg [1:0] Krow_1_lpi_dfm_2;
    reg [1:0] Kcolumn_1_lpi_dfm_1;
    reg exit_for_for_for_lpi_dfm_2;
    reg exit_for_for_for_1_sva;
    reg [9:0] Drow_1_sva_1;
    reg [5:0] Result_sg1_lpi_dfm_2;
    reg Result_sg2_lpi_dfm_3;
    reg [5:0] Result_sg1_lpi_dfm_3;
    reg Result_1_lpi_dfm_3;
    reg [1:0] Krow_1_lpi_dfm_4;
    reg [1:0] Kcolumn_1_lpi_dfm_3;
    reg exit_for_for_lpi_dfm_2;
    reg exit_for_for_for_lpi_dfm_4;
    reg exit_for_for_1_sva;
    reg [9:0] Dcolumn_1_sva_1;
    reg [5:0] Result_sg1_lpi_dfm_4;
    reg exit_for_lpi_dfm_2;
    reg Result_sg2_lpi_dfm_6;
    reg [5:0] Result_sg1_lpi_dfm_6;
    reg Result_1_lpi_dfm_6;
    reg for_for_for_for_lor_lpi_dfm_1;
    reg exit_for_for_for_1_sva_1;
    reg exit_for_for_1_sva_1;
    reg [8:0] for_for_for_for_else_acc_itm;
    reg [1:0] for_for_for_for_else_mux_itm;
    reg [1:0] for_for_for_for_else_mux_itm_1;
    reg for_for_for_for_else_mux_1_itm;
    reg for_for_for_for_else_mux_1_itm_1;
    reg [8:0] Drow_slc_Drow_1_itm;
    reg [8:0] Drow_slc_Drow_1_itm_1;
    reg [8:0] Dcolumn_slc_Dcolumn_1_itm;
    reg [8:0] Dcolumn_slc_Dcolumn_1_itm_1;
    reg Drow_slc_Drow_7_itm;
    reg Drow_slc_Drow_7_itm_1;
    reg Drow_slc_Drow_6_itm_1;
    reg Drow_slc_Drow_8_itm_1;
    reg Dcolumn_slc_Dcolumn_7_itm;
    reg Dcolumn_slc_Dcolumn_7_itm_1;
    reg Dcolumn_slc_Dcolumn_6_itm_1;
    reg Dcolumn_slc_Dcolumn_8_itm_1;
    reg for_for_for_for_lor_lpi_dfm_st_1;
    reg exit_for_for_for_1_sva_st_1;
    reg exit_for_for_1_sva_st_1;
    reg main_stage_0_2;
    reg [8:0] Dcolumn_1_lpi_2;
    reg [8:0] Drow_1_lpi_2;
    reg [8:0] Drow_1_lpi_dfm_4;
    reg [8:0] Dcolumn_1_lpi_dfm_2;
    reg [8:0] Drow_1_lpi_dfm_5;
    reg [2:0] for_for_for_for_else_acc_6_sdt;
    reg [2:0] for_for_for_for_else_acc_7_psp;
    reg exit_for_for_for_1_sva_st_1_tcond;
    reg in_rsc_singleport_re_reg_var;
    reg out_rsc_singleport_we_reg_var;
    reg Result_sg2_lpi_dfm_7;
    reg [5:0] Result_sg1_lpi_dfm_7;
    reg Result_1_lpi_dfm_7;
    reg exit_for_for_for_1_sva_st_1_tcond_1;
    reg last_clk;
    reg [8:0] in_rsc_singleport_addr_reg_var_sg1;
    reg [8:0] in_rsc_singleport_addr_reg_var_1;
    reg out_rsc_singleport_data_in_reg_var_sg2;
    reg [5:0] out_rsc_singleport_data_in_reg_var_sg1;
    reg out_rsc_singleport_data_in_reg_var_1;
    reg [8:0] out_rsc_singleport_addr_reg_var_sg1;
    reg [8:0] out_rsc_singleport_addr_reg_var_1;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        in_rsc_singleport_addr_reg_var_1 = in_rsc_singleport_addr_reg_1;
        in_rsc_singleport_addr_reg_var_sg1 = in_rsc_singleport_addr_reg_sg1;
        in_rsc_singleport_re_reg_var = in_rsc_singleport_re_reg;
        out_rsc_singleport_data_in_reg_var_sg1 = out_rsc_singleport_data_in_reg_sg1;
        out_rsc_singleport_data_in_reg_var_1 = out_rsc_singleport_data_in_reg_1;
        out_rsc_singleport_data_in_reg_var_sg2 = out_rsc_singleport_data_in_reg_sg2;
        out_rsc_singleport_addr_reg_var_1 = out_rsc_singleport_addr_reg_1;
        out_rsc_singleport_addr_reg_var_sg1 = out_rsc_singleport_addr_reg_sg1;
        out_rsc_singleport_we_reg_var = out_rsc_singleport_we_reg;
        Result_sg2_lpi_dfm_7 = Result_sg2_lpi_dfm_1;
        Result_sg1_lpi_dfm_7 = Result_sg1_lpi_dfm_1;
        Result_1_lpi_dfm_7 = Result_1_lpi_dfm_1;
        exit_for_for_for_1_sva_st_1_tcond_1 = exit_for_for_for_1_sva_st_1_tcond;
        begin : unreg_outs_lp_0Exit
          forever begin : unreg_outs_lp_0
            // C-Step 0 of Loop 'unreg_outs_lp_0'
            in_rsc_singleport_addr_reg_1 <= 9'b0;
            in_rsc_singleport_addr_reg_sg1 <= 9'b0;
            in_rsc_singleport_re_reg <= 1'b1;
            out_rsc_singleport_data_in_reg_sg1 <= 6'b0;
            out_rsc_singleport_data_in_reg_1 <= 1'b0;
            out_rsc_singleport_data_in_reg_sg2 <= 1'b0;
            out_rsc_singleport_addr_reg_1 <= 9'b0;
            out_rsc_singleport_addr_reg_sg1 <= 9'b0;
            out_rsc_singleport_we_reg <= 1'b1;
            if ( main_stage_0_2 ) begin
              for_for_for_for_else_ac_fixed_cctor_sva = 8'b0;
              if ( for_for_for_for_lor_lpi_dfm_st_1 ) begin
              end
              else begin
                slc_sat_sva = conv_u2u_8_9({Result_sg2_lpi_dfm_6 , Result_sg1_lpi_dfm_6
                    , Result_1_lpi_dfm_6}) + conv_u2u_5_9(readslicef_12_5_7(conv_u2u_24_12(conv_u2u_8_12(in_rsc_singleport_data_out)
                    * conv_u2u_5_12({for_for_for_for_else_mux_itm_1 , 1'b0 , ({{1{for_for_for_for_else_mux_1_itm_1}},
                    for_for_for_for_else_mux_1_itm_1})}))));
                for_for_for_for_else_ac_fixed_cctor_sva = (slc_sat_sva[7:0]) | (signext_8_1(slc_sat_sva[8]));
              end
              Result_sg2_lpi_dfm_1 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[7])
                  , Result_sg2_lpi_dfm_6}, for_for_for_for_lor_lpi_dfm_1);
              Result_sg1_lpi_dfm_1 = MUX_v_6_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[6:1])
                  , Result_sg1_lpi_dfm_6}, for_for_for_for_lor_lpi_dfm_1);
              Result_1_lpi_dfm_1 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[0])
                  , Result_1_lpi_dfm_6}, for_for_for_for_lor_lpi_dfm_1);
              exit_for_for_for_1_sva_st_1_tcond = exit_for_for_for_1_sva_st_1;
              if ( exit_for_for_for_1_sva_st_1 ) begin
                out_rsc_singleport_we_reg <= 1'b0;
                out_rsc_singleport_addr_reg_1 <= Dcolumn_slc_Dcolumn_1_itm_1;
                out_rsc_singleport_addr_reg_sg1 <= Drow_slc_Drow_1_itm_1;
                out_rsc_singleport_data_in_reg_sg1 <= Result_sg1_lpi_dfm_1;
                out_rsc_singleport_data_in_reg_1 <= Result_1_lpi_dfm_1;
                out_rsc_singleport_data_in_reg_sg2 <= Result_sg2_lpi_dfm_1;
              end
            end
            last_clk = clk;
            @((clk) or (in_rsc_singleport_data_out));
            // C-Step 0 of Loop 'unreg_outs_lp_0'
            if ( (~ last_clk) & clk )
              disable unreg_outs_lp_0Exit;
            in_rsc_singleport_addr_reg_1 <= in_rsc_singleport_addr_reg_var_1;
            in_rsc_singleport_addr_reg_sg1 <= in_rsc_singleport_addr_reg_var_sg1;
            in_rsc_singleport_re_reg <= in_rsc_singleport_re_reg_var;
            out_rsc_singleport_data_in_reg_sg1 <= out_rsc_singleport_data_in_reg_var_sg1;
            out_rsc_singleport_data_in_reg_1 <= out_rsc_singleport_data_in_reg_var_1;
            out_rsc_singleport_data_in_reg_sg2 <= out_rsc_singleport_data_in_reg_var_sg2;
            out_rsc_singleport_addr_reg_1 <= out_rsc_singleport_addr_reg_var_1;
            out_rsc_singleport_addr_reg_sg1 <= out_rsc_singleport_addr_reg_var_sg1;
            out_rsc_singleport_we_reg <= out_rsc_singleport_we_reg_var;
            Result_sg2_lpi_dfm_1 = Result_sg2_lpi_dfm_7;
            Result_sg1_lpi_dfm_1 = Result_sg1_lpi_dfm_7;
            Result_1_lpi_dfm_1 = Result_1_lpi_dfm_7;
            exit_for_for_for_1_sva_st_1_tcond = exit_for_for_for_1_sva_st_1_tcond_1;
          end
        end
        if ( rst )
          disable mainExit;
        if ( main_stage_0_2 ) begin
          Result_sg1_lpi_dfm_4 = 6'b0;
          Result_sg1_lpi_dfm_2 = 6'b0;
          if ( exit_for_for_for_1_sva_st_1_tcond ) begin
            Result_sg1_lpi_dfm_2 = Result_sg1_lpi_dfm_1 & ({{5{Drow_slc_Drow_7_itm_1}},
                Drow_slc_Drow_7_itm_1});
          end
          Result_sg2_lpi_dfm_3 = MUX_s_1_2_2({Result_sg2_lpi_dfm_1 , (Result_sg2_lpi_dfm_1
              & Drow_slc_Drow_6_itm_1)}, exit_for_for_for_1_sva_1);
          Result_sg1_lpi_dfm_3 = MUX_v_6_2_2({Result_sg1_lpi_dfm_1 , Result_sg1_lpi_dfm_2},
              exit_for_for_for_1_sva_1);
          Result_1_lpi_dfm_3 = MUX_s_1_2_2({Result_1_lpi_dfm_1 , (Result_1_lpi_dfm_1
              & Drow_slc_Drow_8_itm_1)}, exit_for_for_for_1_sva_1);
          if ( exit_for_for_1_sva_st_1 ) begin
            Result_sg1_lpi_dfm_4 = Result_sg1_lpi_dfm_3 & ({{5{Dcolumn_slc_Dcolumn_7_itm_1}},
                Dcolumn_slc_Dcolumn_7_itm_1});
          end
          Result_sg2_lpi = MUX_s_1_2_2({Result_sg2_lpi_dfm_3 , (Result_sg2_lpi_dfm_3
              & Dcolumn_slc_Dcolumn_6_itm_1)}, exit_for_for_1_sva_1);
          Result_sg1_lpi = MUX_v_6_2_2({Result_sg1_lpi_dfm_3 , Result_sg1_lpi_dfm_4},
              exit_for_for_1_sva_1);
          Result_1_lpi = MUX_s_1_2_2({Result_1_lpi_dfm_3 , (Result_1_lpi_dfm_3 &
              Dcolumn_slc_Dcolumn_8_itm_1)}, exit_for_for_1_sva_1);
        end
        Dcolumn_1_sva_1 = 10'b0;
        Drow_1_sva_1 = 10'b0;
        for_for_for_for_lor_sva_1 = 1'b0;
        Result_sg2_lpi_dfm = Result_sg2_lpi & (~ exit_for_1_lpi);
        Result_sg1_lpi_dfm = Result_sg1_lpi & (signext_6_1(~ exit_for_1_lpi));
        Result_1_lpi_dfm = Result_1_lpi & (~ exit_for_1_lpi);
        Drow_1_lpi_dfm_4 = Drow_1_lpi_2 & (signext_9_1(~ exit_for_1_lpi));
        Dcolumn_1_lpi_dfm_2 = Dcolumn_1_lpi_2 & (signext_9_1(~ exit_for_1_lpi));
        Krow_1_lpi_dfm = Krow_1_lpi & (signext_2_1(~ exit_for_1_lpi));
        Kcolumn_1_lpi_dfm = Kcolumn_1_lpi & (signext_2_1(~ exit_for_1_lpi));
        conv1_sva = conv_s2s_3_11(conv_u2s_2_3(Kcolumn_1_lpi_dfm) + 3'b111) + conv_u2s_9_11(Dcolumn_1_lpi_dfm_2);
        conv2_sva = conv_s2s_2_11(Krow_1_lpi_dfm + 2'b11) + conv_u2s_9_11(Drow_1_lpi_dfm_4);
        for_for_for_for_lor_1_lpi_dfm = (conv2_sva[10]) | (conv1_sva[9]) | (conv1_sva[10]);
        if ( for_for_for_for_lor_1_lpi_dfm ) begin
        end
        else begin
          for_for_for_for_lor_sva_1 = readslicef_2_1_1(((~ (conv2_sva[10:9])) + 2'b1));
        end
        for_for_for_for_lor_lpi_dfm = for_for_for_for_lor_sva_1 | for_for_for_for_lor_1_lpi_dfm;
        if ( for_for_for_for_lor_lpi_dfm ) begin
        end
        else begin
          for_for_for_for_else_acc_6_sdt = conv_u2u_2_3(Krow_1_lpi_dfm) + conv_u2u_2_3(Kcolumn_1_lpi_dfm);
          for_for_for_for_else_acc_7_psp = conv_u2u_2_3(for_for_for_for_else_acc_6_sdt[2:1])
              + conv_u2u_2_3(Krow_1_lpi_dfm);
          for_for_for_for_else_acc_itm = (conv2_sva[8:0]) + conv_s2u_2_9(conv1_sva[10:9]);
          for_for_for_for_else_mux_itm = MUX_v_2_16_2({2'b1 , 2'b10 , 2'b1 , 2'b10
              , 2'b0 , 2'b10 , 2'b1 , 2'b10 , 2'b1 , 2'b0 , 2'b0 , 2'b0 , 2'b0 ,
              2'b0 , 2'b0 , 2'b0}, {for_for_for_for_else_acc_7_psp , (for_for_for_for_else_acc_6_sdt[0])});
          for_for_for_for_else_mux_1_itm = MUX_s_1_16_2({1'b0 , 1'b0 , 1'b0 , 1'b0
              , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0
              , 1'b0 , 1'b0}, {for_for_for_for_else_acc_7_psp , (for_for_for_for_else_acc_6_sdt[0])});
        end
        Krow_1_sva_1 = Krow_1_lpi_dfm + 2'b1;
        exit_for_for_for_for_sva = ~ (readslicef_3_1_2((({1'b1 , Krow_1_sva_1}) +
            3'b1)));
        if ( exit_for_for_for_for_sva ) begin
          Kcolumn_1_sva_1 = Kcolumn_1_lpi_dfm + 2'b1;
          exit_for_for_for_sva_1 = ~ (readslicef_3_1_2((({1'b1 , Kcolumn_1_sva_1})
              + 3'b1)));
          Krow_1_lpi_dfm_2 = Krow_1_sva_1 & ({{1{exit_for_for_for_sva_1}}, exit_for_for_for_sva_1});
          Kcolumn_1_lpi_dfm_1 = Kcolumn_1_sva_1;
          exit_for_for_for_lpi_dfm_2 = exit_for_for_for_sva_1;
        end
        else begin
          Krow_1_lpi_dfm_2 = Krow_1_sva_1;
          Kcolumn_1_lpi_dfm_1 = Kcolumn_1_lpi_dfm;
          exit_for_for_for_lpi_dfm_2 = exit_for_for_for_lpi & (~ exit_for_1_lpi);
        end
        exit_for_for_for_1_sva = exit_for_for_for_for_sva & exit_for_for_for_lpi_dfm_2;
        if ( exit_for_for_for_1_sva ) begin
          Drow_slc_Drow_1_itm = Drow_1_lpi_dfm_4;
          Dcolumn_slc_Dcolumn_1_itm = Dcolumn_1_lpi_dfm_2;
          Drow_1_sva_1 = conv_u2u_9_10(Drow_1_lpi_dfm_4) + 10'b1;
          Drow_slc_Drow_7_itm = Drow_1_sva_1[9];
          Drow_1_lpi_dfm_5 = Drow_1_sva_1[8:0];
          Krow_1_lpi_dfm_4 = Krow_1_lpi_dfm_2 & (signext_2_1(Drow_1_sva_1[9]));
          Kcolumn_1_lpi_dfm_3 = Kcolumn_1_lpi_dfm_1 & (signext_2_1(Drow_1_sva_1[9]));
          exit_for_for_lpi_dfm_2 = Drow_1_sva_1[9];
          exit_for_for_for_lpi_dfm_4 = exit_for_for_for_lpi_dfm_2 & (Drow_1_sva_1[9]);
        end
        else begin
          Drow_1_lpi_dfm_5 = Drow_1_lpi_dfm_4;
          Krow_1_lpi_dfm_4 = Krow_1_lpi_dfm_2;
          Kcolumn_1_lpi_dfm_3 = Kcolumn_1_lpi_dfm_1;
          exit_for_for_lpi_dfm_2 = exit_for_for_lpi & (~ exit_for_1_lpi);
          exit_for_for_for_lpi_dfm_4 = exit_for_for_for_lpi_dfm_2;
        end
        exit_for_for_1_sva = exit_for_for_for_1_sva & exit_for_for_lpi_dfm_2;
        if ( exit_for_for_1_sva ) begin
          Dcolumn_1_sva_1 = conv_u2u_9_10(Dcolumn_1_lpi_dfm_2) + 10'b1;
          Dcolumn_slc_Dcolumn_7_itm = Dcolumn_1_sva_1[9];
          exit_for_lpi_dfm_2 = Dcolumn_1_sva_1[9];
          Drow_1_lpi_2 = Drow_1_lpi_dfm_5 & (signext_9_1(Dcolumn_1_sva_1[9]));
          Dcolumn_1_lpi_2 = Dcolumn_1_sva_1[8:0];
          Krow_1_lpi = Krow_1_lpi_dfm_4 & (signext_2_1(Dcolumn_1_sva_1[9]));
          Kcolumn_1_lpi = Kcolumn_1_lpi_dfm_3 & (signext_2_1(Dcolumn_1_sva_1[9]));
          exit_for_for_lpi = exit_for_for_lpi_dfm_2 & (Dcolumn_1_sva_1[9]);
          exit_for_for_for_lpi = exit_for_for_for_lpi_dfm_4 & (Dcolumn_1_sva_1[9]);
        end
        else begin
          exit_for_lpi_dfm_2 = exit_for_lpi_dfm_2 & (~ exit_for_1_lpi);
          Drow_1_lpi_2 = Drow_1_lpi_dfm_5;
          Dcolumn_1_lpi_2 = Dcolumn_1_lpi_dfm_2;
          Krow_1_lpi = Krow_1_lpi_dfm_4;
          Kcolumn_1_lpi = Kcolumn_1_lpi_dfm_3;
          exit_for_for_lpi = exit_for_for_lpi_dfm_2;
          exit_for_for_for_lpi = exit_for_for_for_lpi_dfm_4;
        end
        exit_for_1_lpi = exit_for_for_1_sva & exit_for_lpi_dfm_2;
        in_rsc_singleport_addr_reg_1 <= 9'b0;
        in_rsc_singleport_addr_reg_sg1 <= 9'b0;
        in_rsc_singleport_re_reg <= 1'b1;
        out_rsc_singleport_data_in_reg_sg1 <= 6'b0;
        out_rsc_singleport_data_in_reg_1 <= 1'b0;
        out_rsc_singleport_data_in_reg_sg2 <= 1'b0;
        out_rsc_singleport_addr_reg_1 <= 9'b0;
        out_rsc_singleport_addr_reg_sg1 <= 9'b0;
        out_rsc_singleport_we_reg <= 1'b1;
        if ( for_for_for_for_lor_lpi_dfm ) begin
        end
        else begin
          in_rsc_singleport_re_reg <= 1'b0;
          in_rsc_singleport_addr_reg_1 <= conv1_sva[8:0];
          in_rsc_singleport_addr_reg_sg1 <= for_for_for_for_else_acc_itm;
        end
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        Result_sg2_lpi_dfm_6 = Result_sg2_lpi_dfm;
        Result_sg1_lpi_dfm_6 = Result_sg1_lpi_dfm;
        Result_1_lpi_dfm_6 = Result_1_lpi_dfm;
        for_for_for_for_lor_lpi_dfm_1 = for_for_for_for_lor_lpi_dfm;
        exit_for_for_for_1_sva_1 = exit_for_for_for_1_sva;
        exit_for_for_1_sva_1 = exit_for_for_1_sva;
        for_for_for_for_else_mux_itm_1 = for_for_for_for_else_mux_itm;
        for_for_for_for_else_mux_1_itm_1 = for_for_for_for_else_mux_1_itm;
        Drow_slc_Drow_1_itm_1 = Drow_slc_Drow_1_itm;
        Dcolumn_slc_Dcolumn_1_itm_1 = Dcolumn_slc_Dcolumn_1_itm;
        Drow_slc_Drow_7_itm_1 = Drow_slc_Drow_7_itm;
        Drow_slc_Drow_6_itm_1 = Drow_1_sva_1[9];
        Drow_slc_Drow_8_itm_1 = Drow_1_sva_1[9];
        Dcolumn_slc_Dcolumn_7_itm_1 = Dcolumn_slc_Dcolumn_7_itm;
        Dcolumn_slc_Dcolumn_6_itm_1 = Dcolumn_1_sva_1[9];
        Dcolumn_slc_Dcolumn_8_itm_1 = Dcolumn_1_sva_1[9];
        for_for_for_for_lor_lpi_dfm_st_1 = for_for_for_for_lor_lpi_dfm;
        exit_for_for_for_1_sva_st_1 = exit_for_for_for_1_sva;
        exit_for_for_1_sva_st_1 = exit_for_for_1_sva;
        main_stage_0_2 = 1'b1;
      end
    end
    exit_for_for_1_sva_st_1 = 1'b0;
    exit_for_for_for_1_sva_st_1 = 1'b0;
    for_for_for_for_lor_lpi_dfm_st_1 = 1'b0;
    Dcolumn_slc_Dcolumn_8_itm_1 = 1'b0;
    Dcolumn_slc_Dcolumn_6_itm_1 = 1'b0;
    Dcolumn_slc_Dcolumn_7_itm_1 = 1'b0;
    Dcolumn_slc_Dcolumn_7_itm = 1'b0;
    Drow_slc_Drow_8_itm_1 = 1'b0;
    Drow_slc_Drow_6_itm_1 = 1'b0;
    Drow_slc_Drow_7_itm_1 = 1'b0;
    Drow_slc_Drow_7_itm = 1'b0;
    Dcolumn_slc_Dcolumn_1_itm_1 = 9'b0;
    Dcolumn_slc_Dcolumn_1_itm = 9'b0;
    Drow_slc_Drow_1_itm_1 = 9'b0;
    Drow_slc_Drow_1_itm = 9'b0;
    for_for_for_for_else_mux_1_itm_1 = 1'b0;
    for_for_for_for_else_mux_1_itm = 1'b0;
    for_for_for_for_else_mux_itm_1 = 2'b0;
    for_for_for_for_else_mux_itm = 2'b0;
    for_for_for_for_else_acc_itm = 9'b0;
    exit_for_for_1_sva_1 = 1'b0;
    exit_for_for_for_1_sva_1 = 1'b0;
    for_for_for_for_lor_lpi_dfm_1 = 1'b0;
    Result_1_lpi_dfm_6 = 1'b0;
    Result_sg1_lpi_dfm_6 = 6'b0;
    Result_sg2_lpi_dfm_6 = 1'b0;
    exit_for_lpi_dfm_2 = 1'b0;
    Result_1_lpi_dfm_1 = 1'b0;
    Result_sg1_lpi_dfm_1 = 6'b0;
    Result_sg2_lpi_dfm_1 = 1'b0;
    out_rsc_singleport_we_reg <= 1'b0;
    out_rsc_singleport_addr_reg_1 <= 9'b0;
    out_rsc_singleport_addr_reg_sg1 <= 9'b0;
    out_rsc_singleport_data_in_reg_sg1 <= 6'b0;
    out_rsc_singleport_data_in_reg_1 <= 1'b0;
    out_rsc_singleport_data_in_reg_sg2 <= 1'b0;
    in_rsc_singleport_re_reg <= 1'b0;
    in_rsc_singleport_addr_reg_1 <= 9'b0;
    in_rsc_singleport_addr_reg_sg1 <= 9'b0;
    Dcolumn_1_lpi_2 = 9'b0;
    Drow_1_lpi_2 = 9'b0;
    exit_for_for_lpi = 1'b0;
    Result_sg1_lpi = 6'b0;
    Result_1_lpi = 1'b0;
    Result_sg2_lpi = 1'b0;
    Kcolumn_1_lpi = 2'b0;
    exit_for_for_for_lpi = 1'b0;
    Krow_1_lpi = 2'b0;
    exit_for_1_lpi = 1'b1;
    main_stage_0_2 = 1'b0;
    in_rsc_singleport_addr_reg_1 <= 9'b0;
    in_rsc_singleport_addr_reg_sg1 <= 9'b0;
    in_rsc_singleport_re_reg <= 1'b1;
    out_rsc_singleport_data_in_reg_sg1 <= 6'b0;
    out_rsc_singleport_data_in_reg_1 <= 1'b0;
    out_rsc_singleport_data_in_reg_sg2 <= 1'b0;
    out_rsc_singleport_addr_reg_1 <= 9'b0;
    out_rsc_singleport_addr_reg_sg1 <= 9'b0;
    out_rsc_singleport_we_reg <= 1'b1;
  end

  assign in_rsc_singleport_addr = {in_rsc_singleport_addr_reg_sg1 , in_rsc_singleport_addr_reg_1};
  assign in_rsc_singleport_re = in_rsc_singleport_re_reg;
  assign out_rsc_singleport_data_in = {out_rsc_singleport_data_in_reg_sg2 , out_rsc_singleport_data_in_reg_sg1
      , out_rsc_singleport_data_in_reg_1};
  assign out_rsc_singleport_addr = {out_rsc_singleport_addr_reg_sg1 , out_rsc_singleport_addr_reg_1};
  assign out_rsc_singleport_we = out_rsc_singleport_we_reg;

  function [4:0] readslicef_12_5_7;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_12_5_7 = tmp[4:0];
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [5:0] signext_6_1;
    input [0:0] vector;
  begin
    signext_6_1= {{5{vector[0]}}, vector};
  end
  endfunction


  function [8:0] signext_9_1;
    input [0:0] vector;
  begin
    signext_9_1= {{8{vector[0]}}, vector};
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function [1:0] MUX_v_2_16_2;
    input [31:0] inputs;
    input [3:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[31:30];
      end
      4'b0001 : begin
        result = inputs[29:28];
      end
      4'b0010 : begin
        result = inputs[27:26];
      end
      4'b0011 : begin
        result = inputs[25:24];
      end
      4'b0100 : begin
        result = inputs[23:22];
      end
      4'b0101 : begin
        result = inputs[21:20];
      end
      4'b0110 : begin
        result = inputs[19:18];
      end
      4'b0111 : begin
        result = inputs[17:16];
      end
      4'b1000 : begin
        result = inputs[15:14];
      end
      4'b1001 : begin
        result = inputs[13:12];
      end
      4'b1010 : begin
        result = inputs[11:10];
      end
      4'b1011 : begin
        result = inputs[9:8];
      end
      4'b1100 : begin
        result = inputs[7:6];
      end
      4'b1101 : begin
        result = inputs[5:4];
      end
      4'b1110 : begin
        result = inputs[3:2];
      end
      4'b1111 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[31:30];
      end
    endcase
    MUX_v_2_16_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_16_2;
    input [15:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[15:15];
      end
      4'b0001 : begin
        result = inputs[14:14];
      end
      4'b0010 : begin
        result = inputs[13:13];
      end
      4'b0011 : begin
        result = inputs[12:12];
      end
      4'b0100 : begin
        result = inputs[11:11];
      end
      4'b0101 : begin
        result = inputs[10:10];
      end
      4'b0110 : begin
        result = inputs[9:9];
      end
      4'b0111 : begin
        result = inputs[8:8];
      end
      4'b1000 : begin
        result = inputs[7:7];
      end
      4'b1001 : begin
        result = inputs[6:6];
      end
      4'b1010 : begin
        result = inputs[5:5];
      end
      4'b1011 : begin
        result = inputs[4:4];
      end
      4'b1100 : begin
        result = inputs[3:3];
      end
      4'b1101 : begin
        result = inputs[2:2];
      end
      4'b1110 : begin
        result = inputs[1:1];
      end
      4'b1111 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[15:15];
      end
    endcase
    MUX_s_1_16_2 = result;
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_5_9 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_9 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_24_12 ;
    input [23:0]  vector ;
  begin
    conv_u2u_24_12 = vector[11:0];
  end
  endfunction


  function  [11:0] conv_u2u_8_12 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_12 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_5_12 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_12 = {{7{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_3_11 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_11 = {{8{vector[2]}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_2_11 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_11 = {{9{vector[1]}}, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_s2u_2_9 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion
//  Generated from file(s):
//    2) $PROJECT_HOME/ESL_CA2.c
// ------------------------------------------------------------------


module Convolotion (
  clk, rst, in_rsc_singleport_data_in, in_rsc_singleport_addr, in_rsc_singleport_re,
      in_rsc_singleport_we, in_rsc_singleport_data_out, out_rsc_singleport_data_in,
      out_rsc_singleport_addr, out_rsc_singleport_re, out_rsc_singleport_we, out_rsc_singleport_data_out
);
  input clk;
  input rst;
  output [7:0] in_rsc_singleport_data_in;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  output in_rsc_singleport_we;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_re;
  output out_rsc_singleport_we;
  input [7:0] out_rsc_singleport_data_out;


  // Interconnect Declarations
  wire [17:0] in_rsc_singleport_addr_reg;
  wire in_rsc_singleport_re_reg;
  wire [7:0] out_rsc_singleport_data_in_reg;
  wire [17:0] out_rsc_singleport_addr_reg;
  wire out_rsc_singleport_we_reg;

  Convolotion_core Convolotion_core_inst (
      .clk(clk),
      .rst(rst),
      .in_rsc_singleport_addr(in_rsc_singleport_addr_reg),
      .in_rsc_singleport_re(in_rsc_singleport_re_reg),
      .in_rsc_singleport_data_out(in_rsc_singleport_data_out),
      .out_rsc_singleport_data_in(out_rsc_singleport_data_in_reg),
      .out_rsc_singleport_addr(out_rsc_singleport_addr_reg),
      .out_rsc_singleport_we(out_rsc_singleport_we_reg)
    );
  assign in_rsc_singleport_data_in = 8'b0;
  assign in_rsc_singleport_addr = in_rsc_singleport_addr_reg;
  assign in_rsc_singleport_re = in_rsc_singleport_re_reg;
  assign in_rsc_singleport_we = 1'b1;
  assign out_rsc_singleport_data_in = out_rsc_singleport_data_in_reg;
  assign out_rsc_singleport_addr = out_rsc_singleport_addr_reg;
  assign out_rsc_singleport_re = 1'b1;
  assign out_rsc_singleport_we = out_rsc_singleport_we_reg;
endmodule



