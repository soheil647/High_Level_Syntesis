// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.41 Production Release
//  HLS Date:       Thu Apr  7 20:28:55 PDT 2011
// 
//  Generated by:   ss@DESKTOP-UB05SU4
//  Generated date: Sat Apr 20 18:20:07 2019
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module Convolotion_core_fsm (
  clk, rst, fsm_output
);
  input clk;
  input rst;
  output [1:0] fsm_output;
  reg [1:0] fsm_output;


  // FSM State Type Declaration for Convolotion_core_fsm_1
  parameter
    st_main = 1'd0,
    st_main_1 = 1'd1,
    state_x = 1'b0;

  reg [0:0] state_var;
  reg [0:0] state_var_NS;

  always @(state_var)
  begin : Convolotion_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 2'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 2'b10;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 2'b00;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion_core
// ------------------------------------------------------------------


module Convolotion_core (
  clk, rst, in_rsc_singleport_addr, in_rsc_singleport_re, in_rsc_singleport_data_out,
      out_rsc_singleport_data_in, out_rsc_singleport_addr, out_rsc_singleport_we
);
  input clk;
  input rst;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_we;


  // Interconnect Declarations
  wire [1:0] fsm_output;
  wire [9:0] for_for_acc_3_tmp;
  wire [10:0] xfor_for_acc_3_tmp;
  wire [10:0] for_for_for_for_acc_3_tmp;
  wire [11:0] xfor_for_for_for_acc_3_tmp;
  wire [10:0] for_for_for_for_acc_1_tmp;
  wire [11:0] xfor_for_for_for_acc_1_tmp;
  wire or_dcpl_2;
  wire or_dcpl_4;
  wire and_dcpl_44;
  reg exit_for_for_lpi;
  reg [1:0] Kcolumn_1_lpi;
  reg exit_for_for_for_lpi;
  reg [1:0] Krow_1_lpi;
  reg exit_for_1_lpi;
  reg Result_sg2_lpi_reg;
  reg [5:0] Result_sg1_lpi_reg;
  reg Result_1_lpi_reg;
  reg for_for_for_for_lor_lpi_reg;
  reg exit_for_for_for_1_sva_reg;
  reg exit_for_for_1_sva_reg;
  reg exit_for_lpi_dfm_2;
  reg [8:0] for_for_for_for_else_acc_itm;
  reg [8:0] for_for_for_for_else_slc_conv1_2_itm;
  reg [1:0] for_for_for_for_else_mux_reg;
  reg for_for_for_for_else_mux_1_reg;
  reg [8:0] Drow_slc_Drow_1_reg;
  reg [8:0] Dcolumn_slc_Dcolumn_1_reg;
  reg Drow_slc_Drow_7_reg;
  reg Drow_slc_Drow_8_itm_1;
  reg Dcolumn_slc_Dcolumn_8_itm_1;
  reg main_stage_0_2;
  reg [8:0] Dcolumn_1_lpi_2;
  reg [8:0] Drow_1_lpi_2;
  wire and_20_cse;
  wire [8:0] Dcolumn_1_lpi_dfm_2;
  wire and_21_cse;
  reg reg_Drow_1_sva_1_tmp;
  reg reg_Dcolumn_1_sva_1_tmp;
  wire and_cse;
  wire and_58_cse;
  wire Result_sg2_lpi_dfm_1_mx0;
  wire [5:0] Result_sg1_lpi_dfm_1_mx0;
  wire Result_1_lpi_dfm_1_mx0;
  wire or_dcpl;
  wire and_68_cse;
  wire [9:0] Dcolumn_1_sva_1;
  wire [10:0] xDcolumn_1_sva_1;
  wire [8:0] slc_sat_sva;
  wire [9:0] xslc_sat_sva;
  wire [1:0] Kcolumn_1_sva_1;
  wire [2:0] xKcolumn_1_sva_1;
  wire [1:0] Krow_1_sva_1;
  wire [2:0] xKrow_1_sva_1;
  wire nor_4_m1c;
  wire or_25_tmp;
  wire [8:0] and_90_cse;
  wire [1:0] and_75_cse;
  wire and_80_cse;
  wire and_77_cse;
  wire [1:0] for_for_for_acc_itm;
  wire [2:0] xfor_for_for_acc_itm;
  wire [1:0] for_for_for_for_acc_itm;
  wire [2:0] xfor_for_for_for_acc_itm;
  wire [7:0] for_for_for_for_else_ac_fixed_cctor_sva;
  wire exit_for_for_lpi_dfm_2_mx0;
  wire exit_for_for_for_lpi_dfm_2_mx0;
  wire exit_for_for_1_sva_reg_mx0w0;
  wire exit_for_for_for_1_sva_reg_1;
  wire [1:0] Krow_1_lpi_dfm;
  wire Result_1_lpi_dfm_3_mx0;
  wire Result_sg2_lpi_dfm_3_mx0;
  wire [2:0] for_for_for_for_else_acc_6_sdt;
  wire [3:0] xfor_for_for_for_else_acc_6_sdt;
  wire exit_for_for_for_lpi_dfm_4;
  wire exit_for_lpi_dfm_2_mx0w1;
  wire and_dcpl;
  wire slc_exs_24_tmp_tmp;
  wire and_105_cse;
  wire and_104_cse;
  wire or_35_cse;
  wire [2:0] for_for_for_for_else_acc_7_itm;
  wire [3:0] xfor_for_for_for_else_acc_7_itm;

  Convolotion_core_fsm Convolotion_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output)
    );
  assign and_21_cse = or_dcpl_4 & (fsm_output[0]);
  assign and_cse = (~ or_dcpl_2) & and_21_cse;
  assign and_58_cse = or_dcpl_2 & and_21_cse;
  assign nor_4_m1c = ~(or_dcpl | and_68_cse);
  assign and_75_cse = Kcolumn_1_lpi & (signext_2_1(~ exit_for_1_lpi));
  assign and_80_cse = (~ (fsm_output[0])) & nor_4_m1c;
  assign and_77_cse = and_20_cse & nor_4_m1c;
  assign and_104_cse = and_dcpl & (~ (for_for_acc_3_tmp[9]));
  assign or_35_cse = (and_dcpl & (for_for_acc_3_tmp[9])) | ((~ (for_for_for_for_acc_itm[1]))
      & or_dcpl_2 & and_21_cse & nor_4_m1c);
  assign and_90_cse = Drow_1_lpi_2 & (signext_9_1(~ exit_for_1_lpi));
  assign or_25_tmp = and_dcpl_44 | exit_for_lpi_dfm_2;
  assign for_for_for_for_else_ac_fixed_cctor_sva = (slc_sat_sva[7:0]) | (signext_8_1(slc_sat_sva[8]));
  assign xslc_sat_sva = conv_u2u_8_9({Result_sg2_lpi_reg , Result_sg1_lpi_reg , Result_1_lpi_reg})
      + conv_u2u_5_9(readslicef_12_5_7(conv_u2u_24_12(conv_u2u_8_12(in_rsc_singleport_data_out)
      * conv_u2u_5_12({for_for_for_for_else_mux_reg , 1'b0 , ({{1{for_for_for_for_else_mux_1_reg}},
      for_for_for_for_else_mux_1_reg})}))));
  assign slc_sat_sva = xslc_sat_sva[8:0];
  assign Result_sg2_lpi_dfm_1_mx0 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[7])
      , Result_sg2_lpi_reg}, for_for_for_for_lor_lpi_reg);
  assign Result_sg1_lpi_dfm_1_mx0 = MUX_v_6_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[6:1])
      , Result_sg1_lpi_reg}, for_for_for_for_lor_lpi_reg);
  assign Result_1_lpi_dfm_1_mx0 = MUX_s_1_2_2({(for_for_for_for_else_ac_fixed_cctor_sva[0])
      , Result_1_lpi_reg}, for_for_for_for_lor_lpi_reg);
  assign xfor_for_for_for_acc_1_tmp = conv_s2s_3_11(conv_u2s_2_3(and_75_cse) + 3'b111)
      + conv_u2s_9_11(Dcolumn_1_lpi_dfm_2);
  assign for_for_for_for_acc_1_tmp = xfor_for_for_for_acc_1_tmp[10:0];
  assign xfor_for_for_for_acc_3_tmp = conv_s2s_2_11(Krow_1_lpi_dfm + 2'b11) + conv_u2s_9_11(and_90_cse);
  assign for_for_for_for_acc_3_tmp = xfor_for_for_for_acc_3_tmp[10:0];
  assign exit_for_for_lpi_dfm_2_mx0 = MUX_s_1_2_2({(for_for_acc_3_tmp[9]) , (exit_for_for_lpi
      & (~ exit_for_1_lpi))}, or_dcpl_2);
  assign xfor_for_acc_3_tmp = conv_u2u_9_10(and_90_cse) + 10'b1;
  assign for_for_acc_3_tmp = xfor_for_acc_3_tmp[9:0];
  assign exit_for_for_for_lpi_dfm_2_mx0 = MUX_s_1_2_2({(~ (for_for_for_acc_itm[1]))
      , (exit_for_for_for_lpi & (~ exit_for_1_lpi))}, for_for_for_for_acc_itm[1]);
  assign xfor_for_for_acc_itm = Kcolumn_1_sva_1 + 2'b1;
  assign for_for_for_acc_itm = xfor_for_for_acc_itm[1:0];
  assign xKcolumn_1_sva_1 = and_75_cse + 2'b1;
  assign Kcolumn_1_sva_1 = xKcolumn_1_sva_1[1:0];
  assign exit_for_for_1_sva_reg_mx0w0 = exit_for_for_for_1_sva_reg_1 & exit_for_for_lpi_dfm_2_mx0;
  assign exit_for_for_for_1_sva_reg_1 = (~ (for_for_for_for_acc_itm[1])) & exit_for_for_for_lpi_dfm_2_mx0;
  assign xfor_for_for_for_acc_itm = Krow_1_sva_1 + 2'b1;
  assign for_for_for_for_acc_itm = xfor_for_for_for_acc_itm[1:0];
  assign xKrow_1_sva_1 = Krow_1_lpi_dfm + 2'b1;
  assign Krow_1_sva_1 = xKrow_1_sva_1[1:0];
  assign Krow_1_lpi_dfm = Krow_1_lpi & (signext_2_1(~ exit_for_1_lpi));
  assign Dcolumn_1_lpi_dfm_2 = Dcolumn_1_lpi_2 & (signext_9_1(~ exit_for_1_lpi));
  assign Result_1_lpi_dfm_3_mx0 = MUX_s_1_2_2({Result_1_lpi_dfm_1_mx0 , (Result_1_lpi_dfm_1_mx0
      & Drow_slc_Drow_8_itm_1)}, exit_for_for_for_1_sva_reg);
  assign Result_sg2_lpi_dfm_3_mx0 = MUX_s_1_2_2({Result_sg2_lpi_dfm_1_mx0 , (Result_sg2_lpi_dfm_1_mx0
      & Drow_slc_Drow_8_itm_1)}, exit_for_for_for_1_sva_reg);
  assign xfor_for_for_for_else_acc_6_sdt = conv_u2u_2_3(Krow_1_lpi_dfm) + conv_u2u_2_3(and_75_cse);
  assign for_for_for_for_else_acc_6_sdt = xfor_for_for_for_else_acc_6_sdt[2:0];
  assign exit_for_for_for_lpi_dfm_4 = (~ (for_for_for_acc_itm[1])) & (for_for_acc_3_tmp[9]);
  assign exit_for_lpi_dfm_2_mx0w1 = exit_for_lpi_dfm_2 & (~ exit_for_1_lpi);
  assign xDcolumn_1_sva_1 = conv_u2u_9_10(Dcolumn_1_lpi_dfm_2) + 10'b1;
  assign Dcolumn_1_sva_1 = xDcolumn_1_sva_1[9:0];
  assign xfor_for_for_for_else_acc_7_itm = conv_u2u_2_3(for_for_for_for_else_acc_6_sdt[2:1])
      + conv_u2u_2_3(Krow_1_lpi_dfm);
  assign for_for_for_for_else_acc_7_itm = xfor_for_for_for_else_acc_7_itm[2:0];
  assign or_dcpl_2 = (for_for_for_for_acc_itm[1]) | (for_for_for_acc_itm[1]);
  assign and_20_cse = (~((for_for_for_for_acc_itm[1]) | (for_for_for_acc_itm[1])))
      & (for_for_acc_3_tmp[9]) & (fsm_output[0]);
  assign or_dcpl_4 = or_dcpl_2 | (~ (for_for_acc_3_tmp[9]));
  assign and_dcpl_44 = main_stage_0_2 & (~ exit_for_for_1_sva_reg);
  assign in_rsc_singleport_addr = {for_for_for_for_else_acc_itm , for_for_for_for_else_slc_conv1_2_itm};
  assign in_rsc_singleport_re = ~((fsm_output[1]) & (~ for_for_for_for_lor_lpi_reg));
  assign out_rsc_singleport_data_in = {Result_sg2_lpi_dfm_1_mx0 , Result_sg1_lpi_dfm_1_mx0
      , Result_1_lpi_dfm_1_mx0};
  assign out_rsc_singleport_addr = {Drow_slc_Drow_1_reg , Dcolumn_slc_Dcolumn_1_reg};
  assign out_rsc_singleport_we = (~(main_stage_0_2 & exit_for_for_for_1_sva_reg))
      | (fsm_output[1]);
  assign or_dcpl = (and_20_cse & (Dcolumn_1_sva_1[9])) | and_cse;
  assign and_68_cse = and_20_cse & (~ (Dcolumn_1_sva_1[9]));
  assign and_dcpl = or_dcpl & (for_for_acc_3_tmp[9]);
  assign and_105_cse = or_dcpl & (~ (for_for_acc_3_tmp[9]));
  assign slc_exs_24_tmp_tmp = ~(Drow_slc_Drow_7_reg | (~ exit_for_for_for_1_sva_reg));
  always @(posedge clk) begin
    if ( rst ) begin
      for_for_for_for_else_slc_conv1_2_itm <= 9'b0;
      for_for_for_for_else_acc_itm <= 9'b0;
      exit_for_for_lpi <= 1'b0;
      exit_for_1_lpi <= 1'b1;
      exit_for_for_for_lpi <= 1'b0;
      for_for_for_for_lor_lpi_reg <= 1'b0;
      exit_for_for_1_sva_reg <= 1'b0;
      exit_for_for_for_1_sva_reg <= 1'b0;
      Kcolumn_1_lpi <= 2'b0;
      Krow_1_lpi <= 2'b0;
      Dcolumn_1_lpi_2 <= 9'b0;
      Drow_1_lpi_2 <= 9'b0;
      main_stage_0_2 <= 1'b0;
      Dcolumn_slc_Dcolumn_8_itm_1 <= 1'b0;
      Drow_slc_Drow_8_itm_1 <= 1'b0;
      for_for_for_for_else_mux_1_reg <= 1'b0;
      for_for_for_for_else_mux_reg <= 2'b0;
      exit_for_lpi_dfm_2 <= 1'b0;
      Dcolumn_slc_Dcolumn_1_reg <= 9'b0;
      Drow_slc_Drow_1_reg <= 9'b0;
      Result_1_lpi_reg <= 1'b0;
      Result_sg1_lpi_reg <= 6'b0;
      Result_sg2_lpi_reg <= 1'b0;
      Drow_slc_Drow_7_reg <= 1'b0;
      reg_Drow_1_sva_1_tmp <= 1'b0;
      reg_Dcolumn_1_sva_1_tmp <= 1'b0;
    end
    else begin
      for_for_for_for_else_slc_conv1_2_itm <= for_for_for_for_acc_1_tmp[8:0];
      for_for_for_for_else_acc_itm <= (for_for_for_for_acc_3_tmp[8:0]) + conv_s2u_2_9(for_for_for_for_acc_1_tmp[10:9]);
      exit_for_for_lpi <= MUX1HOT_s_1_3_2({((for_for_acc_3_tmp[9]) & (Dcolumn_1_sva_1[9]))
          , exit_for_for_lpi_dfm_2_mx0 , exit_for_for_lpi}, {and_20_cse , and_21_cse
          , (~ (fsm_output[0]))});
      exit_for_1_lpi <= MUX_s_1_2_2({exit_for_1_lpi , (exit_for_for_1_sva_reg_mx0w0
          & (MUX_s_1_2_2({(Dcolumn_1_sva_1[9]) , exit_for_lpi_dfm_2_mx0w1}, or_dcpl_4)))},
          fsm_output[0]);
      exit_for_for_for_lpi <= MUX1HOT_s_1_4_2({(exit_for_for_for_lpi_dfm_4 & (Dcolumn_1_sva_1[9]))
          , exit_for_for_for_lpi_dfm_4 , exit_for_for_for_lpi_dfm_2_mx0 , exit_for_for_for_lpi},
          {and_20_cse , and_cse , and_58_cse , (~ (fsm_output[0]))});
      for_for_for_for_lor_lpi_reg <= MUX_s_1_2_2({for_for_for_for_lor_lpi_reg , ((readslicef_2_1_1(((~
          (for_for_for_for_acc_3_tmp[10:9])) + 2'b1))) | (for_for_for_for_acc_3_tmp[10])
          | (for_for_for_for_acc_1_tmp[9]) | (for_for_for_for_acc_1_tmp[10]))}, fsm_output[0]);
      exit_for_for_1_sva_reg <= MUX_s_1_2_2({exit_for_for_1_sva_reg , exit_for_for_1_sva_reg_mx0w0},
          fsm_output[0]);
      exit_for_for_for_1_sva_reg <= MUX_s_1_2_2({exit_for_for_for_1_sva_reg , exit_for_for_for_1_sva_reg_1},
          fsm_output[0]);
      Kcolumn_1_lpi <= ~((~(((MUX_v_2_2_2({((MUX_v_2_2_2({and_75_cse , Kcolumn_1_lpi},
          and_80_cse)) & (signext_2_1(~ or_dcpl))) , Kcolumn_1_sva_1}, or_35_cse))
          & (signext_2_1(~ and_105_cse))) | ({{1{and_104_cse}}, and_104_cse}) | ({{1{and_77_cse}},
          and_77_cse}))) | ({{1{and_68_cse}}, and_68_cse}));
      Krow_1_lpi <= ~((~((~((MUX_v_2_2_2({(~((MUX_v_2_2_2({Krow_1_sva_1 , Krow_1_lpi},
          and_80_cse)) & (signext_2_1(~ or_dcpl)))) , (~(Krow_1_sva_1 & (signext_2_1(~
          (for_for_for_acc_itm[1])))))}, or_35_cse)) | ({{1{and_105_cse}}, and_105_cse})))
          | ({{1{and_104_cse}}, and_104_cse}) | ({{1{and_77_cse}}, and_77_cse})))
          | ({{1{and_68_cse}}, and_68_cse}));
      Dcolumn_1_lpi_2 <= MUX1HOT_v_9_3_2({(Dcolumn_1_sva_1[8:0]) , Dcolumn_1_lpi_dfm_2
          , Dcolumn_1_lpi_2}, {and_20_cse , and_21_cse , (~ (fsm_output[0]))});
      Drow_1_lpi_2 <= ~((~((MUX1HOT_v_9_3_2({and_90_cse , Drow_1_lpi_2 , (for_for_acc_3_tmp[8:0])},
          {(and_58_cse & nor_4_m1c) , and_80_cse , or_dcpl})) | ({{8{and_77_cse}},
          and_77_cse}))) | ({{8{and_68_cse}}, and_68_cse}));
      main_stage_0_2 <= 1'b1;
      Dcolumn_slc_Dcolumn_8_itm_1 <= reg_Dcolumn_1_sva_1_tmp;
      Drow_slc_Drow_8_itm_1 <= reg_Drow_1_sva_1_tmp;
      for_for_for_for_else_mux_1_reg <= MUX_s_1_2_2({(MUX_s_1_16_2({1'b0 , 1'b0 ,
          1'b0 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0
          , 1'b0 , 1'b0 , 1'b0}, {for_for_for_for_else_acc_7_itm , (for_for_for_for_else_acc_6_sdt[0])}))
          , for_for_for_for_else_mux_1_reg}, fsm_output[1]);
      for_for_for_for_else_mux_reg <= MUX_v_2_2_2({(MUX_v_2_16_2({2'b1 , 2'b10 ,
          2'b1 , 2'b10 , 2'b0 , 2'b10 , 2'b1 , 2'b10 , 2'b1 , 2'b0 , 2'b0 , 2'b0
          , 2'b0 , 2'b0 , 2'b0 , 2'b0}, {for_for_for_for_else_acc_7_itm , (for_for_for_for_else_acc_6_sdt[0])}))
          , for_for_for_for_else_mux_reg}, fsm_output[1]);
      exit_for_lpi_dfm_2 <= MUX1HOT_s_1_3_2({(Dcolumn_1_sva_1[9]) , exit_for_lpi_dfm_2_mx0w1
          , exit_for_lpi_dfm_2}, {and_20_cse , and_21_cse , (~ (fsm_output[0]))});
      Dcolumn_slc_Dcolumn_1_reg <= MUX_v_9_2_2({Dcolumn_1_lpi_dfm_2 , Dcolumn_slc_Dcolumn_1_reg},
          fsm_output[1]);
      Drow_slc_Drow_1_reg <= MUX_v_9_2_2({and_90_cse , Drow_slc_Drow_1_reg}, fsm_output[1]);
      Result_1_lpi_reg <= MUX_s_1_2_2({Result_1_lpi_reg , ((MUX_s_1_2_2({(Result_1_lpi_dfm_3_mx0
          & Dcolumn_slc_Dcolumn_8_itm_1) , Result_1_lpi_dfm_3_mx0}, and_dcpl_44))
          & main_stage_0_2 & (~ exit_for_1_lpi))}, fsm_output[0]);
      Result_sg1_lpi_reg <= MUX_v_6_2_2({Result_sg1_lpi_reg , ((~((~(((Result_sg1_lpi_dfm_1_mx0
          & (signext_6_1(~ slc_exs_24_tmp_tmp))) | ({{5{slc_exs_24_tmp_tmp}}, slc_exs_24_tmp_tmp}))
          & (signext_6_1(~((~ Drow_slc_Drow_7_reg) & exit_for_for_for_1_sva_reg)))))
          & ({{5{or_25_tmp}}, or_25_tmp}))) & ({{5{or_25_tmp}}, or_25_tmp}) & ({{5{main_stage_0_2}},
          main_stage_0_2}) & (signext_6_1(~ exit_for_1_lpi)))}, fsm_output[0]);
      Result_sg2_lpi_reg <= MUX_s_1_2_2({Result_sg2_lpi_reg , ((MUX_s_1_2_2({(Result_sg2_lpi_dfm_3_mx0
          & Dcolumn_slc_Dcolumn_8_itm_1) , Result_sg2_lpi_dfm_3_mx0}, and_dcpl_44))
          & main_stage_0_2 & (~ exit_for_1_lpi))}, fsm_output[0]);
      Drow_slc_Drow_7_reg <= MUX_s_1_2_2({(for_for_acc_3_tmp[9]) , Drow_slc_Drow_7_reg},
          fsm_output[1]);
      reg_Drow_1_sva_1_tmp <= for_for_acc_3_tmp[9];
      reg_Dcolumn_1_sva_1_tmp <= Dcolumn_1_sva_1[9];
    end
  end

  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [8:0] signext_9_1;
    input [0:0] vector;
  begin
    signext_9_1= {{8{vector[0]}}, vector};
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [4:0] readslicef_12_5_7;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_12_5_7 = tmp[4:0];
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [0:0] MUX1HOT_s_1_3_2;
    input [2:0] inputs;
    input [2:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function [0:0] MUX1HOT_s_1_4_2;
    input [3:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [8:0] MUX1HOT_v_9_3_2;
    input [26:0] inputs;
    input [2:0] sel;
    reg [8:0] result;
    integer i;
  begin
    result = inputs[0+:9] & {9{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*9+:9] & {9{sel[i]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_16_2;
    input [15:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[15:15];
      end
      4'b0001 : begin
        result = inputs[14:14];
      end
      4'b0010 : begin
        result = inputs[13:13];
      end
      4'b0011 : begin
        result = inputs[12:12];
      end
      4'b0100 : begin
        result = inputs[11:11];
      end
      4'b0101 : begin
        result = inputs[10:10];
      end
      4'b0110 : begin
        result = inputs[9:9];
      end
      4'b0111 : begin
        result = inputs[8:8];
      end
      4'b1000 : begin
        result = inputs[7:7];
      end
      4'b1001 : begin
        result = inputs[6:6];
      end
      4'b1010 : begin
        result = inputs[5:5];
      end
      4'b1011 : begin
        result = inputs[4:4];
      end
      4'b1100 : begin
        result = inputs[3:3];
      end
      4'b1101 : begin
        result = inputs[2:2];
      end
      4'b1110 : begin
        result = inputs[1:1];
      end
      4'b1111 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[15:15];
      end
    endcase
    MUX_s_1_16_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_16_2;
    input [31:0] inputs;
    input [3:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[31:30];
      end
      4'b0001 : begin
        result = inputs[29:28];
      end
      4'b0010 : begin
        result = inputs[27:26];
      end
      4'b0011 : begin
        result = inputs[25:24];
      end
      4'b0100 : begin
        result = inputs[23:22];
      end
      4'b0101 : begin
        result = inputs[21:20];
      end
      4'b0110 : begin
        result = inputs[19:18];
      end
      4'b0111 : begin
        result = inputs[17:16];
      end
      4'b1000 : begin
        result = inputs[15:14];
      end
      4'b1001 : begin
        result = inputs[13:12];
      end
      4'b1010 : begin
        result = inputs[11:10];
      end
      4'b1011 : begin
        result = inputs[9:8];
      end
      4'b1100 : begin
        result = inputs[7:6];
      end
      4'b1101 : begin
        result = inputs[5:4];
      end
      4'b1110 : begin
        result = inputs[3:2];
      end
      4'b1111 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[31:30];
      end
    endcase
    MUX_v_2_16_2 = result;
  end
  endfunction


  function [8:0] MUX_v_9_2_2;
    input [17:0] inputs;
    input [0:0] sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[17:9];
      end
      1'b1 : begin
        result = inputs[8:0];
      end
      default : begin
        result = inputs[17:9];
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function [5:0] signext_6_1;
    input [0:0] vector;
  begin
    signext_6_1= {{5{vector[0]}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_5_9 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_9 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_24_12 ;
    input [23:0]  vector ;
  begin
    conv_u2u_24_12 = vector[11:0];
  end
  endfunction


  function  [11:0] conv_u2u_8_12 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_12 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_5_12 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_12 = {{7{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_3_11 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_11 = {{8{vector[2]}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_11 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_2_11 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_11 = {{9{vector[1]}}, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_s2u_2_9 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Convolotion
//  Generated from file(s):
//    2) $PROJECT_HOME/ESL_CA2.c
// ------------------------------------------------------------------


module Convolotion (
  clk, rst, in_rsc_singleport_data_in, in_rsc_singleport_addr, in_rsc_singleport_re,
      in_rsc_singleport_we, in_rsc_singleport_data_out, out_rsc_singleport_data_in,
      out_rsc_singleport_addr, out_rsc_singleport_re, out_rsc_singleport_we, out_rsc_singleport_data_out
);
  input clk;
  input rst;
  output [7:0] in_rsc_singleport_data_in;
  output [17:0] in_rsc_singleport_addr;
  output in_rsc_singleport_re;
  output in_rsc_singleport_we;
  input [7:0] in_rsc_singleport_data_out;
  output [7:0] out_rsc_singleport_data_in;
  output [17:0] out_rsc_singleport_addr;
  output out_rsc_singleport_re;
  output out_rsc_singleport_we;
  input [7:0] out_rsc_singleport_data_out;


  // Interconnect Declarations
  wire [17:0] in_rsc_singleport_addr_reg;
  wire in_rsc_singleport_re_reg;
  wire [7:0] out_rsc_singleport_data_in_reg;
  wire [17:0] out_rsc_singleport_addr_reg;
  wire out_rsc_singleport_we_reg;

  Convolotion_core Convolotion_core_inst (
      .clk(clk),
      .rst(rst),
      .in_rsc_singleport_addr(in_rsc_singleport_addr_reg),
      .in_rsc_singleport_re(in_rsc_singleport_re_reg),
      .in_rsc_singleport_data_out(in_rsc_singleport_data_out),
      .out_rsc_singleport_data_in(out_rsc_singleport_data_in_reg),
      .out_rsc_singleport_addr(out_rsc_singleport_addr_reg),
      .out_rsc_singleport_we(out_rsc_singleport_we_reg)
    );
  assign in_rsc_singleport_data_in = 8'b0;
  assign in_rsc_singleport_addr = in_rsc_singleport_addr_reg;
  assign in_rsc_singleport_re = in_rsc_singleport_re_reg;
  assign in_rsc_singleport_we = 1'b1;
  assign out_rsc_singleport_data_in = out_rsc_singleport_data_in_reg;
  assign out_rsc_singleport_addr = out_rsc_singleport_addr_reg;
  assign out_rsc_singleport_re = 1'b1;
  assign out_rsc_singleport_we = out_rsc_singleport_we_reg;
endmodule



