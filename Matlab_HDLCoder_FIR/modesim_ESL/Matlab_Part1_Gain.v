// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\untitled\Subsystem.v
// Created: 2019-05-08 12:01:52
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.2
// Target subsystem base rate: 0.2
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y                             ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: untitled/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           x,
           ce_out,
           y);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] x;  // int16
  output  ce_out;
  output  signed [15:0] y;  // int16


  wire enb;
  wire signed [15:0] kconst;  // sfix16_En15
  reg signed [15:0] kconst_1;  // sfix16_En15
  reg signed [15:0] x_1;  // int16
  reg signed [15:0] x_2;  // int16
  reg signed [15:0] Delay1_out1;  // int16
  wire signed [31:0] Gain2_out1;  // sfix32_En15
  reg signed [31:0] Gain2_out1_1;  // sfix32_En15
  wire signed [31:0] Gain4_out1;  // sfix32_En9
  wire signed [15:0] kconst_2;  // sfix16_En14
  reg signed [15:0] kconst_3;  // sfix16_En14
  wire signed [31:0] Gain1_out1;  // sfix32_En14
  reg signed [31:0] Gain1_out1_1;  // sfix32_En14
  wire signed [31:0] Gain5_out1;  // sfix32_En12
  reg signed [31:0] delayMatch1_reg [0:1];  // sfix32 [2]
  wire signed [31:0] delayMatch1_reg_next [0:1];  // sfix32_En12 [2]
  wire signed [31:0] Gain5_out1_1;  // sfix32_En12
  wire signed [15:0] kconst_4;  // sfix16_En11
  reg signed [15:0] kconst_5;  // sfix16_En11
  wire signed [31:0] Gain6_out1;  // sfix32_En11
  reg signed [31:0] Gain6_out1_1;  // sfix32_En11
  wire signed [31:0] Gain7_out1;  // sfix32_En9
  reg signed [31:0] delayMatch2_reg [0:1];  // sfix32 [2]
  wire signed [31:0] delayMatch2_reg_next [0:1];  // sfix32_En9 [2]
  wire signed [31:0] Gain7_out1_1;  // sfix32_En9
  wire signed [15:0] kconst_6;  // sfix16_En9
  reg signed [15:0] kconst_7;  // sfix16_En9
  wire signed [31:0] Gain8_out1;  // sfix32_En9
  reg signed [31:0] Gain8_out1_1;  // sfix32_En9
  wire signed [31:0] Gain9_out1;  // sfix32_En6
  reg signed [31:0] delayMatch3_reg [0:1];  // sfix32 [2]
  wire signed [31:0] delayMatch3_reg_next [0:1];  // sfix32_En6 [2]
  wire signed [31:0] Gain9_out1_1;  // sfix32_En6
  wire signed [15:0] kconst_8;  // sfix16_En6
  reg signed [15:0] kconst_9;  // sfix16_En6
  wire signed [31:0] Gain10_out1;  // sfix32_En6
  wire signed [15:0] kconst_10;  // sfix16_En10
  reg signed [15:0] kconst_11;  // sfix16_En10
  wire signed [31:0] Gain_out1;  // sfix32_En10
  reg signed [31:0] Gain_out1_1;  // sfix32_En10
  wire signed [31:0] Gain3_out1;  // sfix32_En5
  reg signed [31:0] delayMatch_reg [0:1];  // sfix32 [2]
  wire signed [31:0] delayMatch_reg_next [0:1];  // sfix32_En9 [2]
  wire signed [31:0] Gain4_out1_1;  // sfix32_En9
  wire signed [38:0] Sum3_add_cast;  // sfix39_En15
  wire signed [38:0] Sum3_add_cast_1;  // sfix39_En15
  wire signed [38:0] Sum3_out1;  // sfix39_En15
  reg signed [31:0] Gain10_out1_1;  // sfix32_En6
  wire signed [41:0] Sum4_add_cast;  // sfix42_En14
  wire signed [41:0] Sum4_add_cast_1;  // sfix42_En14
  wire signed [41:0] Sum4_add_temp;  // sfix42_En14
  wire signed [41:0] Sum4_add_cast_2;  // sfix42_En14
  wire signed [41:0] Sum4_add_temp_1;  // sfix42_En14
  wire signed [41:0] Sum4_add_cast_3;  // sfix42_En14
  wire signed [41:0] Sum4_add_temp_2;  // sfix42_En14
  wire signed [41:0] Sum4_add_cast_4;  // sfix42_En14
  wire signed [41:0] Sum4_add_temp_3;  // sfix42_En14
  wire signed [41:0] Sum4_add_cast_5;  // sfix42_En14
  wire signed [41:0] Sum4_add_temp_4;  // sfix42_En14
  wire signed [41:0] Sum4_add_cast_6;  // sfix42_En14
  wire signed [41:0] Sum4_out1;  // sfix42_En14
  reg signed [31:0] delayMatch4_reg [0:1];  // sfix32 [2]
  wire signed [31:0] delayMatch4_reg_next [0:1];  // sfix32_En5 [2]
  wire signed [31:0] Gain3_out1_1;  // sfix32_En5
  wire signed [37:0] Sum2_add_cast;  // sfix38_En10
  wire signed [37:0] Sum2_add_cast_1;  // sfix38_En10
  wire signed [37:0] Sum2_out1;  // sfix38_En10
  wire signed [42:0] Sum_add_cast;  // sfix43_En14
  wire signed [42:0] Sum_add_cast_1;  // sfix43_En14
  wire signed [42:0] Sum_out1;  // sfix43_En14
  wire signed [15:0] Sum1_add_cast;  // sfix16
  wire signed [15:0] Sum1_add_cast_1;  // sfix16
  wire signed [15:0] Sum1_out1;  // int16


  assign kconst = 16'sb1000000000000000;



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : HwModeRegister6_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        x_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          x_1 <= x;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        x_2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          x_2 <= x_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister7_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= x_2;
        end
      end
    end



  assign Gain2_out1 = kconst_1 * Delay1_out1;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Gain2_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain2_out1_1 <= Gain2_out1;
        end
      end
    end



  assign Gain4_out1 = {{2{x_2[15]}}, {x_2, 14'b00000000000000}};



  assign kconst_2 = 16'sb1000000000000000;



  always @(posedge clk or posedge reset)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  assign Gain1_out1 = kconst_3 * x_2;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end



  assign Gain5_out1 = {{2{x_1[15]}}, {x_1, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 32'sb00000000000000000000000000000000;
        delayMatch1_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
        end
      end
    end

  assign Gain5_out1_1 = delayMatch1_reg[1];
  assign delayMatch1_reg_next[0] = Gain5_out1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];



  assign kconst_4 = 16'sb1000000000000000;



  always @(posedge clk or posedge reset)
    begin : HwModeRegister8_process
      if (reset == 1'b1) begin
        kconst_5 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_5 <= kconst_4;
        end
      end
    end



  assign Gain6_out1 = kconst_5 * x_2;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister4_process
      if (reset == 1'b1) begin
        Gain6_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain6_out1_1 <= Gain6_out1;
        end
      end
    end



  assign Gain7_out1 = {{2{x_1[15]}}, {x_1, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg[0] <= 32'sb00000000000000000000000000000000;
        delayMatch2_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch2_reg[0] <= delayMatch2_reg_next[0];
          delayMatch2_reg[1] <= delayMatch2_reg_next[1];
        end
      end
    end

  assign Gain7_out1_1 = delayMatch2_reg[1];
  assign delayMatch2_reg_next[0] = Gain7_out1;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];



  assign kconst_6 = 16'sb1000000000000000;



  always @(posedge clk or posedge reset)
    begin : HwModeRegister10_process
      if (reset == 1'b1) begin
        kconst_7 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_7 <= kconst_6;
        end
      end
    end



  assign Gain8_out1 = kconst_7 * x_2;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister5_process
      if (reset == 1'b1) begin
        Gain8_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain8_out1_1 <= Gain8_out1;
        end
      end
    end



  assign Gain9_out1 = {{2{x_1[15]}}, {x_1, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        delayMatch3_reg[0] <= 32'sb00000000000000000000000000000000;
        delayMatch3_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch3_reg[0] <= delayMatch3_reg_next[0];
          delayMatch3_reg[1] <= delayMatch3_reg_next[1];
        end
      end
    end

  assign Gain9_out1_1 = delayMatch3_reg[1];
  assign delayMatch3_reg_next[0] = Gain9_out1;
  assign delayMatch3_reg_next[1] = delayMatch3_reg[0];



  assign kconst_8 = 16'sb1000000000000000;



  always @(posedge clk or posedge reset)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        kconst_9 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_9 <= kconst_8;
        end
      end
    end



  assign Gain10_out1 = kconst_9 * x_2;



  assign kconst_10 = 16'sb1000000000000000;



  always @(posedge clk or posedge reset)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_11 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_11 <= kconst_10;
        end
      end
    end



  assign Gain_out1 = kconst_11 * x_1;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign Gain3_out1 = {{2{x[15]}}, {x, 14'b00000000000000}};



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 32'sb00000000000000000000000000000000;
        delayMatch_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Gain4_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Gain4_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Sum3_add_cast = {{7{Gain2_out1_1[31]}}, Gain2_out1_1};
  assign Sum3_add_cast_1 = {Gain4_out1_1[31], {Gain4_out1_1, 6'b000000}};
  assign Sum3_out1 = Sum3_add_cast + Sum3_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Gain10_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain10_out1_1 <= Gain10_out1;
        end
      end
    end



  assign Sum4_add_cast = {{10{Gain1_out1_1[31]}}, Gain1_out1_1};
  assign Sum4_add_cast_1 = {{8{Gain5_out1_1[31]}}, {Gain5_out1_1, 2'b00}};
  assign Sum4_add_temp = Sum4_add_cast + Sum4_add_cast_1;
  assign Sum4_add_cast_2 = {{7{Gain6_out1_1[31]}}, {Gain6_out1_1, 3'b000}};
  assign Sum4_add_temp_1 = Sum4_add_temp + Sum4_add_cast_2;
  assign Sum4_add_cast_3 = {{5{Gain7_out1_1[31]}}, {Gain7_out1_1, 5'b00000}};
  assign Sum4_add_temp_2 = Sum4_add_temp_1 + Sum4_add_cast_3;
  assign Sum4_add_cast_4 = {{5{Gain8_out1_1[31]}}, {Gain8_out1_1, 5'b00000}};
  assign Sum4_add_temp_3 = Sum4_add_temp_2 + Sum4_add_cast_4;
  assign Sum4_add_cast_5 = {{2{Gain9_out1_1[31]}}, {Gain9_out1_1, 8'b00000000}};
  assign Sum4_add_temp_4 = Sum4_add_temp_3 + Sum4_add_cast_5;
  assign Sum4_add_cast_6 = {{2{Gain10_out1_1[31]}}, {Gain10_out1_1, 8'b00000000}};
  assign Sum4_out1 = Sum4_add_temp_4 + Sum4_add_cast_6;



  always @(posedge clk or posedge reset)
    begin : delayMatch4_process
      if (reset == 1'b1) begin
        delayMatch4_reg[0] <= 32'sb00000000000000000000000000000000;
        delayMatch4_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch4_reg[0] <= delayMatch4_reg_next[0];
          delayMatch4_reg[1] <= delayMatch4_reg_next[1];
        end
      end
    end

  assign Gain3_out1_1 = delayMatch4_reg[1];
  assign delayMatch4_reg_next[0] = Gain3_out1;
  assign delayMatch4_reg_next[1] = delayMatch4_reg[0];



  assign Sum2_add_cast = {{6{Gain_out1_1[31]}}, Gain_out1_1};
  assign Sum2_add_cast_1 = {Gain3_out1_1[31], {Gain3_out1_1, 5'b00000}};
  assign Sum2_out1 = Sum2_add_cast + Sum2_add_cast_1;



  assign Sum_add_cast = {Sum4_out1[41], Sum4_out1};
  assign Sum_add_cast_1 = {Sum2_out1[37], {Sum2_out1, 4'b0000}};
  assign Sum_out1 = Sum_add_cast + Sum_add_cast_1;



  assign Sum1_add_cast = Sum3_out1[30:15];
  assign Sum1_add_cast_1 = Sum_out1[29:14];
  assign Sum1_out1 = Sum1_add_cast + Sum1_add_cast_1;



  assign y = Sum1_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem



