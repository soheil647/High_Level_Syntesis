
// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\untitled\Subsystem.v
// Created: 2019-05-08 12:20:24
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.2
// Target subsystem base rate: 0.2
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y                             ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           x,
           ce_out,
           y);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] x;  // int16
  output  ce_out;
  output  signed [15:0] y;  // int16


  wire enb;
  reg signed [15:0] Delay_out1;  // int16
  reg signed [15:0] Delay1_out1;  // int16
  wire signed [15:0] Shift_Arithmetic2_out1;  // int16
  wire signed [15:0] Shift_Arithmetic5_out1;  // int16
  wire signed [15:0] Shift_Arithmetic4_out1;  // int16
  wire signed [18:0] Sum4_stage2_1;  // sfix19
  wire signed [18:0] Sum4_stage2_2;  // sfix19
  wire signed [18:0] Sum4_op_stage2;  // sfix19
  wire signed [15:0] Shift_Arithmetic6_out1;  // int16
  wire signed [18:0] Sum4_stage3_1;  // sfix19
  wire signed [18:0] Sum4_op_stage3;  // sfix19
  wire signed [15:0] Shift_Arithmetic7_out1;  // int16
  wire signed [18:0] Sum4_stage4_1;  // sfix19
  wire signed [18:0] Sum4_op_stage4;  // sfix19
  wire signed [15:0] Shift_Arithmetic8_out1;  // int16
  wire signed [18:0] Sum4_stage5_1;  // sfix19
  wire signed [18:0] Sum4_op_stage5;  // sfix19
  wire signed [15:0] Shift_Arithmetic9_out1;  // int16
  wire signed [18:0] Sum4_stage6_1;  // sfix19
  wire signed [18:0] Sum4_op_stage6;  // sfix19
  wire signed [15:0] Shift_Arithmetic1_out1;  // int16
  wire signed [16:0] Sum3_1;  // sfix17
  wire signed [16:0] Sum3_2;  // sfix17
  wire signed [16:0] Sum3_out1;  // sfix17
  wire signed [15:0] Shift_Arithmetic10_out1;  // int16
  wire signed [18:0] Sum4_stage7_1;  // sfix19
  wire signed [18:0] Sum4_out1;  // sfix19
  wire signed [15:0] Shift_Arithmetic_out1;  // int16
  wire signed [16:0] Sum2_1;  // sfix17
  wire signed [16:0] Sum2_2;  // sfix17
  wire signed [16:0] Sum2_out1;  // sfix17
  wire signed [19:0] Sum_1;  // sfix20
  wire signed [19:0] Sum_2;  // sfix20
  wire signed [19:0] Sum_out1;  // sfix20
  wire signed [15:0] Sum1_add_cast;  // sfix16
  wire signed [15:0] Sum1_add_cast_1;  // sfix16
  wire signed [15:0] Sum1_out1;  // int16


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= x;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Delay_out1;
        end
      end
    end



  assign Shift_Arithmetic2_out1 = Delay1_out1 <<< 8'd5;



  assign Shift_Arithmetic5_out1 = Delay_out1 <<< 8'd2;



  assign Shift_Arithmetic4_out1 = Delay_out1 <<< 8'd1;



  assign Sum4_stage2_1 = {{3{Shift_Arithmetic5_out1[15]}}, Shift_Arithmetic5_out1};
  assign Sum4_stage2_2 = {{3{Shift_Arithmetic4_out1[15]}}, Shift_Arithmetic4_out1};
  assign Sum4_op_stage2 = Sum4_stage2_1 - Sum4_stage2_2;



  assign Shift_Arithmetic6_out1 = Delay_out1 <<< 8'd4;



  assign Sum4_stage3_1 = {{3{Shift_Arithmetic6_out1[15]}}, Shift_Arithmetic6_out1};
  assign Sum4_op_stage3 = Sum4_op_stage2 - Sum4_stage3_1;



  assign Shift_Arithmetic7_out1 = Delay_out1 <<< 8'd5;



  assign Sum4_stage4_1 = {{3{Shift_Arithmetic7_out1[15]}}, Shift_Arithmetic7_out1};
  assign Sum4_op_stage4 = Sum4_op_stage3 + Sum4_stage4_1;



  assign Shift_Arithmetic8_out1 = Delay_out1 <<< 8'd6;



  assign Sum4_stage5_1 = {{3{Shift_Arithmetic8_out1[15]}}, Shift_Arithmetic8_out1};
  assign Sum4_op_stage5 = Sum4_op_stage4 - Sum4_stage5_1;



  assign Shift_Arithmetic9_out1 = Delay_out1 <<< 8'd8;



  assign Sum4_stage6_1 = {{3{Shift_Arithmetic9_out1[15]}}, Shift_Arithmetic9_out1};
  assign Sum4_op_stage6 = Sum4_op_stage5 + Sum4_stage6_1;



  assign Shift_Arithmetic1_out1 = x <<< 8'd9;



  assign Sum3_1 = {Shift_Arithmetic2_out1[15], Shift_Arithmetic2_out1};
  assign Sum3_2 = {Delay1_out1[15], Delay1_out1};
  assign Sum3_out1 = Sum3_1 - Sum3_2;



  assign Shift_Arithmetic10_out1 = Delay_out1 <<< 8'd9;



  assign Sum4_stage7_1 = {{3{Shift_Arithmetic10_out1[15]}}, Shift_Arithmetic10_out1};
  assign Sum4_out1 = Sum4_op_stage6 - Sum4_stage7_1;



  assign Shift_Arithmetic_out1 = x <<< 8'd5;



  assign Sum2_1 = {Shift_Arithmetic1_out1[15], Shift_Arithmetic1_out1};
  assign Sum2_2 = {Shift_Arithmetic_out1[15], Shift_Arithmetic_out1};
  assign Sum2_out1 = Sum2_1 - Sum2_2;



  assign Sum_1 = {Sum4_out1[18], Sum4_out1};
  assign Sum_2 = {{3{Sum2_out1[16]}}, Sum2_out1};
  assign Sum_out1 = Sum_1 + Sum_2;



  assign Sum1_add_cast = Sum3_out1[15:0];
  assign Sum1_add_cast_1 = Sum_out1[15:0];
  assign Sum1_out1 = Sum1_add_cast + Sum1_add_cast_1;



  assign y = Sum1_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem


