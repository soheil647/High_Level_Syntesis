// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\untitled\Subsystem.v
// Created: 2019-05-09 13:23:24
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.0125
// Target subsystem base ?rate: 0.0125
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: untitled/Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           In1,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [15:0] In1;  // int16
  output  ce_out;
  output  signed [15:0] Out1;  // int16


  wire enb_16_1_1;
  wire enb;
  wire enb_1_1_1;
  wire signed [15:0] Discrete_FIR_Filter_out1_reg;  // int16
  reg signed [15:0] Discrete_FIR_Filter_out1;  // int16


  Subsystem_tc u_Subsystem_tc (.clk(clk),
                               .reset(reset),
                               .clk_enable(clk_enable),
                               .enb_16_1_1(enb_16_1_1),
                               .enb(enb),
                               .enb_1_1_1(enb_1_1_1)
                               );

  Discrete_FIR_Filter u_Discrete_FIR_Filter (.clk(clk),
                                             .enb_16_1_1(enb_16_1_1),
                                             .reset(reset),
                                             .Discrete_FIR_Filter_in(In1),  // int16
                                             .Discrete_FIR_Filter_out(Discrete_FIR_Filter_out1_reg)  // int16
                                             );

  always @(posedge clk or posedge reset)
    begin : Discrete_FIR_Filter_reg_process
      if (reset == 1'b1) begin
        Discrete_FIR_Filter_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Discrete_FIR_Filter_out1 <= Discrete_FIR_Filter_out1_reg;
        end
      end
    end



  assign Out1 = Discrete_FIR_Filter_out1;

  assign ce_out = enb_1_1_1;

endmodule  // Subsystem


// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\untitled\Subsystem_tc.v
// Created: 2019-05-09 13:23:24
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_tc
// Source Path: Subsystem_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb_16_1_1  : identical to clk_enable
// enb         : 16x slower than clk with last phase
// enb_1_1_1   : 16x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem_tc
          (clk,
           reset,
           clk_enable,
           enb_16_1_1,
           enb,
           enb_1_1_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb_16_1_1;
  output  enb;
  output  enb_1_1_1;


  reg [3:0] count16;  // ufix4
  wire phase_all;
  reg  phase_0;
  wire phase_0_tmp;
  reg  phase_1;
  wire phase_1_tmp;


  always @ (posedge clk or posedge reset)
    begin: Counter16
      if (reset == 1'b1) begin
        count16 <= 4'b0001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count16 >= 4'b1111) begin
            count16 <= 4'b0000;
          end
          else begin
            count16 <= count16 + 4'b0001;
          end
        end
      end
    end // Counter16

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count16 == 4'b1111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process2

  assign  phase_1_tmp = (count16 == 4'b0000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb_16_1_1 =  phase_all & clk_enable;

  assign enb =  phase_0 & clk_enable;

  assign enb_1_1_1 =  phase_1 & clk_enable;


endmodule  // Subsystem_tc


// ------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\untitled\Discrete_FIR_Filter
// Created: 2019-05-09 13:23:23
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// ------------------------------------------------------------
// 
// 
// ------------------------------------------------------------
// 
// Module: Discrete_FIR_Filter
// Source Path: /Discrete_FIR_Filter
// 
// ------------------------------------------------------------
// 
// HDL Implementation    : Distributed arithmetic (DA)
// Folding Factor        : 16
// LUT Address Width     : 4
// Total LUT Size (bits) : 96




`timescale 1 ns / 1 ns

module Discrete_FIR_Filter
               (
                clk,
                enb_16_1_1,
                reset,
                Discrete_FIR_Filter_in,
                Discrete_FIR_Filter_out
                );

  input   clk; 
  input   enb_16_1_1; 
  input   reset; 
  input   signed [15:0] Discrete_FIR_Filter_in; //sfix16
  output  signed [15:0] Discrete_FIR_Filter_out; //sfix16

////////////////////////////////////////////////////////////////
//Module Architecture: Discrete_FIR_Filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000000000011; //sfix16
  parameter signed [15:0] coeff2 = 16'b0000000000001100; //sfix16
  parameter signed [15:0] coeff3 = 16'b0000000000001100; //sfix16
  parameter signed [15:0] coeff4 = 16'b0000000000000011; //sfix16

  // Signals
  wire signed [15:0] filter_in_cast; // sfix16
  reg  [3:0] cur_count; // ufix4
  wire phase_15; // boolean
  wire phase_0; // boolean
  wire serialoutb1; // boolean
  reg  signed [15:0] shiftreg; // sfix16
  reg  delay_pipeline [0:47] ; // boolean
  wire [3:0] mem_addr; // ufix4
  reg  signed [5:0] memoutb1; // sfix6
  reg  signed [21:0] acc_out; // sfix22_En15
  wire signed [21:0] memoutb1_cast; // sfix22_En15
  wire signed [21:0] add_sub_out; // sfix22_En15
  wire signed [21:0] acc_out_shft; // sfix22_En15
  wire signed [21:0] acc_in; // sfix22_En15
  wire signed [21:0] addsub_add; // sfix22_En15
  wire signed [21:0] addsub_sub; // sfix22_En15
  wire signed [21:0] add_cast; // sfix22_En15
  wire signed [21:0] add_cast_1; // sfix22_En15
  wire signed [22:0] add_temp; // sfix23_En15
  wire signed [21:0] sub_cast; // sfix22_En15
  wire signed [21:0] sub_cast_1; // sfix22_En15
  wire signed [22:0] sub_temp; // sfix23_En15
  reg  signed [21:0] final_acc_out; // sfix22_En15
  wire signed [21:0] output_da; // sfix22
  wire signed [15:0] output_typeconvert; // sfix16
  reg  signed [15:0] output_register; // sfix16

  // Block Statements
  assign filter_in_cast = Discrete_FIR_Filter_in;

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 4'b1111;
      end
      else begin
        if (enb_16_1_1 == 1'b1) begin
          if (cur_count >= 4'b1111) begin
            cur_count <= 4'b0000;
          end
          else begin
            cur_count <= cur_count + 4'b0001;
          end
        end
      end
    end // Counter_process

  assign  phase_15 = (cur_count == 4'b1111 && enb_16_1_1 == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 4'b0000 && enb_16_1_1 == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Serializer_1_process
      if (reset == 1'b1) begin
        shiftreg <= 16'b0000000000000000;
      end
      else begin
        if (enb_16_1_1 == 1'b1) begin
          if (phase_15 == 1'b1) begin
            shiftreg <= filter_in_cast;
          end
          else begin
            shiftreg <= {1'b0, shiftreg[15 : 1]};
          end
        end
      end 
    end // Serializer_1_process;

  assign   serialoutb1=shiftreg[0];
 
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_1_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 1'b0;
        delay_pipeline[1] <= 1'b0;
        delay_pipeline[2] <= 1'b0;
        delay_pipeline[3] <= 1'b0;
        delay_pipeline[4] <= 1'b0;
        delay_pipeline[5] <= 1'b0;
        delay_pipeline[6] <= 1'b0;
        delay_pipeline[7] <= 1'b0;
        delay_pipeline[8] <= 1'b0;
        delay_pipeline[9] <= 1'b0;
        delay_pipeline[10] <= 1'b0;
        delay_pipeline[11] <= 1'b0;
        delay_pipeline[12] <= 1'b0;
        delay_pipeline[13] <= 1'b0;
        delay_pipeline[14] <= 1'b0;
        delay_pipeline[15] <= 1'b0;
        delay_pipeline[16] <= 1'b0;
        delay_pipeline[17] <= 1'b0;
        delay_pipeline[18] <= 1'b0;
        delay_pipeline[19] <= 1'b0;
        delay_pipeline[20] <= 1'b0;
        delay_pipeline[21] <= 1'b0;
        delay_pipeline[22] <= 1'b0;
        delay_pipeline[23] <= 1'b0;
        delay_pipeline[24] <= 1'b0;
        delay_pipeline[25] <= 1'b0;
        delay_pipeline[26] <= 1'b0;
        delay_pipeline[27] <= 1'b0;
        delay_pipeline[28] <= 1'b0;
        delay_pipeline[29] <= 1'b0;
        delay_pipeline[30] <= 1'b0;
        delay_pipeline[31] <= 1'b0;
        delay_pipeline[32] <= 1'b0;
        delay_pipeline[33] <= 1'b0;
        delay_pipeline[34] <= 1'b0;
        delay_pipeline[35] <= 1'b0;
        delay_pipeline[36] <= 1'b0;
        delay_pipeline[37] <= 1'b0;
        delay_pipeline[38] <= 1'b0;
        delay_pipeline[39] <= 1'b0;
        delay_pipeline[40] <= 1'b0;
        delay_pipeline[41] <= 1'b0;
        delay_pipeline[42] <= 1'b0;
        delay_pipeline[43] <= 1'b0;
        delay_pipeline[44] <= 1'b0;
        delay_pipeline[45] <= 1'b0;
        delay_pipeline[46] <= 1'b0;
        delay_pipeline[47] <= 1'b0;
      end
      else begin
        if (enb_16_1_1 == 1'b1) begin
          delay_pipeline[0] <= serialoutb1;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
        end
      end
    end // Delay_Pipeline_1_process


  assign mem_addr = {delay_pipeline[47], delay_pipeline[31], delay_pipeline[15], serialoutb1};

  always @(mem_addr)
  begin
    case(mem_addr)
      4'b0000 : memoutb1 = 6'b000000;
      4'b0001 : memoutb1 = 6'b000011;
      4'b0010 : memoutb1 = 6'b001100;
      4'b0011 : memoutb1 = 6'b001111;
      4'b0100 : memoutb1 = 6'b001100;
      4'b0101 : memoutb1 = 6'b001111;
      4'b0110 : memoutb1 = 6'b011000;
      4'b0111 : memoutb1 = 6'b011011;
      4'b1000 : memoutb1 = 6'b000011;
      4'b1001 : memoutb1 = 6'b000110;
      4'b1010 : memoutb1 = 6'b001111;
      4'b1011 : memoutb1 = 6'b010010;
      4'b1100 : memoutb1 = 6'b001111;
      4'b1101 : memoutb1 = 6'b010010;
      4'b1110 : memoutb1 = 6'b011011;
      4'b1111 : memoutb1 = 6'b011110;
      default : memoutb1 = 6'b011110;
    endcase
  end

  //  Shift and add the LUT results to compute the scaled accumulated sum

  assign memoutb1_cast = $signed({memoutb1[5:0], 15'b000000000000000});

  assign acc_out_shft = $signed({{1{acc_out[21]}}, acc_out[21:1]});

  assign add_cast = acc_out_shft;
  assign add_cast_1 = memoutb1_cast;
  assign add_temp = add_cast + add_cast_1;
  assign addsub_add = add_temp[21:0];

  assign sub_cast = acc_out_shft;
  assign sub_cast_1 = memoutb1_cast;
  assign sub_temp = sub_cast - sub_cast_1;
  assign addsub_sub = sub_temp[21:0];

  assign add_sub_out = (phase_15 == 1'b1) ? addsub_sub :
                      addsub_add;

  assign acc_in = (phase_0 == 1'b1) ? memoutb1_cast :
            add_sub_out;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        acc_out <= 0;
      end
      else begin
        if (enb_16_1_1 == 1'b1) begin
          acc_out <= acc_in;
        end
      end
    end // Acc_reg_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        final_acc_out <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          final_acc_out <= acc_out;
        end
      end
    end // Finalsum_reg_process

  assign output_da = final_acc_out;

  assign output_typeconvert = output_da[15:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_15 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign Discrete_FIR_Filter_out = output_register;
endmodule  // Discrete_FIR_Filter

// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\untitled\Subsystem_tb.v
// Created: 2019-05-08 12:23:58
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.2
// Target subsystem base rate: 0.2
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// y                             ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire signed [15:0] rawData_x;  // int16
  wire y_done;  // ufix1
  wire rdEnb;
  wire y_done_enb;  // ufix1
  reg [5:0] y_addr;  // ufix6
  wire y_active;  // ufix1
  reg signed [15:0] holdData_x;  // int16
  reg signed [15:0] x_offset;  // int16
  wire signed [15:0] x_1;  // int16
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  reg  tb_enb_delay;
  wire ce_out;
  wire signed [15:0] y;  // int16
  wire y_enb;  // ufix1
  wire y_lastAddr;  // ufix1
  wire signed [15:0] y_expected_1;  // int16
  wire signed [15:0] y_ref;  // int16
  reg  y_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for x
  assign rawData_x = 16'sb0000000000000000;



  assign y_done_enb = y_done & rdEnb;



  assign y_active = y_addr != 6'b110010;



  // holdData reg for x
  always @(posedge clk or posedge reset)
    begin : stimuli_x
      if (reset) begin
        holdData_x <= 16'bx;
      end
      else begin
        holdData_x <= rawData_x;
      end
    end

  always @(rawData_x or rdEnb)
    begin : stimuli_x_1
      if (rdEnb == 1'b0) begin
        x_offset <= holdData_x;
      end
      else begin
        x_offset <= rawData_x;
      end
    end

  assign #2 x_1 = x_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 50
  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  Subsystem u_Subsystem (.clk(clk),
                         .reset(reset),
                         .clk_enable(clk_enable),
                         .x(x_1),  // int16
                         .ce_out(ce_out),
                         .y(y)  // int16
                         );

  assign y_enb = ce_out & y_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 50
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        y_addr <= 6'b000000;
      end
      else begin
        if (y_enb) begin
          if (y_addr >= 6'b110010) begin
            y_addr <= 6'b000000;
          end
          else begin
            y_addr <= y_addr + 6'b000001;
          end
        end
      end
    end



  assign y_lastAddr = y_addr >= 6'b110010;



  assign y_done = y_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (y_done_enb) begin
          check1_done <= y_done;
        end
      end
    end

  // Data source for y_expected
  assign y_expected_1 = 16'sb0000000000000000;



  assign y_ref = y_expected_1;

  always @(posedge clk or posedge reset)
    begin : y_checker
      if (reset == 1'b1) begin
        y_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && y !== y_ref) begin
          y_testFailure <= 1'b1;
          $display("ERROR in y at time %t : Expected '%h' Actual '%h'", $time, y_ref, y);
        end
      end
    end

  assign testFailure = y_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Subsystem_tb



